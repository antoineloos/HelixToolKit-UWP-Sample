//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace App1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::App1.App1_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[128];
            _typeNameTable[0] = "HelixToolkit.UWP.ModelContainer3DX";
            _typeNameTable[1] = "HelixToolkit.UWP.Controls.HelixItemsControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[3] = "HelixToolkit.UWP.IEffectsManager";
            _typeNameTable[4] = "HelixToolkit.UWP.IRenderTechnique";
            _typeNameTable[5] = "HelixToolkit.Logger.LogWrapper";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "Guid";
            _typeNameTable[8] = "System.ValueType";
            _typeNameTable[9] = "Boolean";
            _typeNameTable[10] = "HelixToolkit.UWP.IRenderHost";
            _typeNameTable[11] = "HelixToolkit.UWP.Render.IRenderer";
            _typeNameTable[12] = "System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>>";
            _typeNameTable[13] = "System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>";
            _typeNameTable[14] = "Int32";
            _typeNameTable[15] = "HelixToolkit.UWP.Model.Scene.SceneNode";
            _typeNameTable[16] = "HelixToolkit.UWP.DisposeObject";
            _typeNameTable[17] = "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.LightNode>";
            _typeNameTable[18] = "System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>";
            _typeNameTable[19] = "HelixToolkit.UWP.Model.OrderKey";
            _typeNameTable[20] = "UInt16";
            _typeNameTable[21] = "SharpDX.Matrix";
            _typeNameTable[22] = "System.Collections.Generic.IList`1<HelixToolkit.UWP.Model.Scene.SceneNode>";
            _typeNameTable[23] = "HelixToolkit.UWP.RenderType";
            _typeNameTable[24] = "System.Enum";
            _typeNameTable[25] = "HelixToolkit.UWP.Core.RenderCore";
            _typeNameTable[26] = "SharpDX.BoundingBox";
            _typeNameTable[27] = "SharpDX.BoundingSphere";
            _typeNameTable[28] = "System.Collections.Generic.IEnumerable`1<String>";
            _typeNameTable[29] = "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.SceneNode>";
            _typeNameTable[30] = "SharpDX.Direct3D11.Device1";
            _typeNameTable[31] = "SharpDX.Direct3D11.Device";
            _typeNameTable[32] = "SharpDX.ComObject";
            _typeNameTable[33] = "SharpDX.CppObject";
            _typeNameTable[34] = "SharpDX.DisposeBase";
            _typeNameTable[35] = "SharpDX.Direct2D1.Device";
            _typeNameTable[36] = "SharpDX.Direct2D1.Resource";
            _typeNameTable[37] = "SharpDX.Color4";
            _typeNameTable[38] = "HelixToolkit.UWP.MSAALevel";
            _typeNameTable[39] = "SharpDX.Direct3D.FeatureLevel";
            _typeNameTable[40] = "HelixToolkit.UWP.IViewport3DX";
            _typeNameTable[41] = "HelixToolkit.UWP.RenderContext";
            _typeNameTable[42] = "UInt32";
            _typeNameTable[43] = "HelixToolkit.UWP.IModelContainer";
            _typeNameTable[44] = "SharpDX.Direct3D11.RenderTargetView";
            _typeNameTable[45] = "SharpDX.Direct3D11.ResourceView";
            _typeNameTable[46] = "SharpDX.Direct3D11.DeviceChild";
            _typeNameTable[47] = "SharpDX.Direct3D11.DepthStencilView";
            _typeNameTable[48] = "HelixToolkit.UWP.Core2D.D2DTargetProxy";
            _typeNameTable[49] = "HelixToolkit.UWP.Utilities.IRenderStatistics";
            _typeNameTable[50] = "HelixToolkit.UWP.RenderDetail";
            _typeNameTable[51] = "HelixToolkit.UWP.DX11RenderHostConfiguration";
            _typeNameTable[52] = "HelixToolkit.UWP.Render.DX11RenderBufferProxyBase";
            _typeNameTable[53] = "HelixToolkit.UWP.Viewport3DX";
            _typeNameTable[54] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[55] = "HelixToolkit.UWP.ObservableElement3DCollection";
            _typeNameTable[56] = "System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.UWP.Element3D>";
            _typeNameTable[57] = "System.Collections.ObjectModel.Collection`1<HelixToolkit.UWP.Element3D>";
            _typeNameTable[58] = "HelixToolkit.UWP.Element3D";
            _typeNameTable[59] = "HelixToolkit.UWP.Model.Element3DCore";
            _typeNameTable[60] = "Windows.UI.Color";
            _typeNameTable[61] = "HelixToolkit.UWP.Camera";
            _typeNameTable[62] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[63] = "HelixToolkit.UWP.FXAALevel";
            _typeNameTable[64] = "SharpDX.Vector3";
            _typeNameTable[65] = "HelixToolkit.UWP.Cameras.CameraCore";
            _typeNameTable[66] = "HelixToolkit.UWP.Model.ObservableObject";
            _typeNameTable[67] = "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene2D.SceneNode2D>";
            _typeNameTable[68] = "HelixToolkit.UWP.ProjectionCamera";
            _typeNameTable[69] = "String";
            _typeNameTable[70] = "Double";
            _typeNameTable[71] = "System.IO.Stream";
            _typeNameTable[72] = "HelixToolkit.UWP.CameraMode";
            _typeNameTable[73] = "HelixToolkit.UWP.CameraRotationMode";
            _typeNameTable[74] = "Windows.UI.Core.CoreCursorType";
            _typeNameTable[75] = "HelixToolkit.UWP.InputController";
            _typeNameTable[76] = "System.Exception";
            _typeNameTable[77] = "HelixToolkit.UWP.OITWeightMode";
            _typeNameTable[78] = "JoystickUserControl.Joystick";
            _typeNameTable[79] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[80] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[81] = "Windows.UI.Xaml.Media.DoubleCollection";
            _typeNameTable[82] = "Windows.UI.Xaml.Media.PenLineCap";
            _typeNameTable[83] = "JoystickUserControl.Joystick.JoystickTheme";
            _typeNameTable[84] = "HelixToolkit.UWP.ShadowMap3D";
            _typeNameTable[85] = "Windows.Foundation.Size";
            _typeNameTable[86] = "HelixToolkit.UWP.IProjectionCameraModel";
            _typeNameTable[87] = "HelixToolkit.UWP.DirectionalLight3D";
            _typeNameTable[88] = "HelixToolkit.UWP.Light3D";
            _typeNameTable[89] = "HelixToolkit.UWP.LightType";
            _typeNameTable[90] = "HelixToolkit.UWP.EnvironmentMap3D";
            _typeNameTable[91] = "HelixToolkit.UWP.GroupModel3D";
            _typeNameTable[92] = "HelixToolkit.UWP.GroupElement3D";
            _typeNameTable[93] = "HelixToolkit.UWP.IOctreeManagerWrapper";
            _typeNameTable[94] = "System.Collections.Generic.IList`1<HelixToolkit.UWP.Element3D>";
            _typeNameTable[95] = "HelixToolkit.UWP.MeshGeometryModel3D";
            _typeNameTable[96] = "HelixToolkit.UWP.MaterialGeometryModel3D";
            _typeNameTable[97] = "HelixToolkit.UWP.GeometryModel3D";
            _typeNameTable[98] = "HelixToolkit.UWP.Geometry3D";
            _typeNameTable[99] = "HelixToolkit.UWP.Material";
            _typeNameTable[100] = "SharpDX.Direct3D11.CullMode";
            _typeNameTable[101] = "System.Collections.Generic.IList`1<SharpDX.Matrix>";
            _typeNameTable[102] = "SharpDX.Vector4";
            _typeNameTable[103] = "SharpDX.Direct3D11.FillMode";
            _typeNameTable[104] = "HelixToolkit.UWP.ParticleStormModel3D";
            _typeNameTable[105] = "SharpDX.Direct3D11.BlendOption";
            _typeNameTable[106] = "HelixToolkit.UWP.Utilities.IRandomVector";
            _typeNameTable[107] = "SharpDX.Direct3D11.BlendOperation";
            _typeNameTable[108] = "HelixToolkit.UWP.LineGeometryModel3D";
            _typeNameTable[109] = "HelixToolkit.UWP.PostEffectMeshBorderHighlight";
            _typeNameTable[110] = "HelixToolkit.UWP.PostEffectMeshOutlineBlur";
            _typeNameTable[111] = "HelixToolkit.UWP.OutlineMode";
            _typeNameTable[112] = "HelixToolkit.UWP.PointGeometryModel3D";
            _typeNameTable[113] = "HelixToolkit.UWP.PointFigure";
            _typeNameTable[114] = "HelixToolkit.UWP.GeometryModel3DOctreeManager";
            _typeNameTable[115] = "HelixToolkit.UWP.OctreeManagerBaseWrapper";
            _typeNameTable[116] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[117] = "HelixToolkit.UWP.IOctreeBasic";
            _typeNameTable[118] = "Single";
            _typeNameTable[119] = "HelixToolkit.UWP.IOctreeManager";
            _typeNameTable[120] = "HelixToolkit.UWP.OctreeBuildParameter";
            _typeNameTable[121] = "HelixToolkit.UWP.DynamicReflectionMap3D";
            _typeNameTable[122] = "HelixToolkit.UWP.BillboardTextModel3D";
            _typeNameTable[123] = "SharpDX.Direct3D11.SamplerStateDescription";
            _typeNameTable[124] = "HelixToolkit.UWP.ItemsModel3D";
            _typeNameTable[125] = "System.Collections.IEnumerable";
            _typeNameTable[126] = "App1.MainPage";
            _typeNameTable[127] = "Windows.UI.Xaml.Controls.Page";

            _typeTable = new global::System.Type[128];
            _typeTable[0] = typeof(global::HelixToolkit.UWP.ModelContainer3DX);
            _typeTable[1] = typeof(global::HelixToolkit.UWP.Controls.HelixItemsControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[3] = typeof(global::HelixToolkit.UWP.IEffectsManager);
            _typeTable[4] = typeof(global::HelixToolkit.UWP.IRenderTechnique);
            _typeTable[5] = typeof(global::HelixToolkit.Logger.LogWrapper);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::System.Guid);
            _typeTable[8] = typeof(global::System.ValueType);
            _typeTable[9] = typeof(global::System.Boolean);
            _typeTable[10] = typeof(global::HelixToolkit.UWP.IRenderHost);
            _typeTable[11] = typeof(global::HelixToolkit.UWP.Render.IRenderer);
            _typeTable[12] = typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>>);
            _typeTable[13] = typeof(global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>);
            _typeTable[14] = typeof(global::System.Int32);
            _typeTable[15] = typeof(global::HelixToolkit.UWP.Model.Scene.SceneNode);
            _typeTable[16] = typeof(global::HelixToolkit.UWP.DisposeObject);
            _typeTable[17] = typeof(global::System.Collections.Generic.IEnumerable<global::HelixToolkit.UWP.Model.Scene.LightNode>);
            _typeTable[18] = typeof(global::System.Collections.Generic.List<global::HelixToolkit.UWP.Model.Scene.SceneNode>);
            _typeTable[19] = typeof(global::HelixToolkit.UWP.Model.OrderKey);
            _typeTable[20] = typeof(global::System.UInt16);
            _typeTable[21] = typeof(global::SharpDX.Matrix);
            _typeTable[22] = typeof(global::System.Collections.Generic.IList<global::HelixToolkit.UWP.Model.Scene.SceneNode>);
            _typeTable[23] = typeof(global::HelixToolkit.UWP.RenderType);
            _typeTable[24] = typeof(global::System.Enum);
            _typeTable[25] = typeof(global::HelixToolkit.UWP.Core.RenderCore);
            _typeTable[26] = typeof(global::SharpDX.BoundingBox);
            _typeTable[27] = typeof(global::SharpDX.BoundingSphere);
            _typeTable[28] = typeof(global::System.Collections.Generic.IEnumerable<global::System.String>);
            _typeTable[29] = typeof(global::System.Collections.Generic.IEnumerable<global::HelixToolkit.UWP.Model.Scene.SceneNode>);
            _typeTable[30] = typeof(global::SharpDX.Direct3D11.Device1);
            _typeTable[31] = typeof(global::SharpDX.Direct3D11.Device);
            _typeTable[32] = typeof(global::SharpDX.ComObject);
            _typeTable[33] = typeof(global::SharpDX.CppObject);
            _typeTable[34] = typeof(global::SharpDX.DisposeBase);
            _typeTable[35] = typeof(global::SharpDX.Direct2D1.Device);
            _typeTable[36] = typeof(global::SharpDX.Direct2D1.Resource);
            _typeTable[37] = typeof(global::SharpDX.Color4);
            _typeTable[38] = typeof(global::HelixToolkit.UWP.MSAALevel);
            _typeTable[39] = typeof(global::SharpDX.Direct3D.FeatureLevel);
            _typeTable[40] = typeof(global::HelixToolkit.UWP.IViewport3DX);
            _typeTable[41] = typeof(global::HelixToolkit.UWP.RenderContext);
            _typeTable[42] = typeof(global::System.UInt32);
            _typeTable[43] = typeof(global::HelixToolkit.UWP.IModelContainer);
            _typeTable[44] = typeof(global::SharpDX.Direct3D11.RenderTargetView);
            _typeTable[45] = typeof(global::SharpDX.Direct3D11.ResourceView);
            _typeTable[46] = typeof(global::SharpDX.Direct3D11.DeviceChild);
            _typeTable[47] = typeof(global::SharpDX.Direct3D11.DepthStencilView);
            _typeTable[48] = typeof(global::HelixToolkit.UWP.Core2D.D2DTargetProxy);
            _typeTable[49] = typeof(global::HelixToolkit.UWP.Utilities.IRenderStatistics);
            _typeTable[50] = typeof(global::HelixToolkit.UWP.RenderDetail);
            _typeTable[51] = typeof(global::HelixToolkit.UWP.DX11RenderHostConfiguration);
            _typeTable[52] = typeof(global::HelixToolkit.UWP.Render.DX11RenderBufferProxyBase);
            _typeTable[53] = typeof(global::HelixToolkit.UWP.Viewport3DX);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[55] = typeof(global::HelixToolkit.UWP.ObservableElement3DCollection);
            _typeTable[56] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.UWP.Element3D>);
            _typeTable[57] = typeof(global::System.Collections.ObjectModel.Collection<global::HelixToolkit.UWP.Element3D>);
            _typeTable[58] = typeof(global::HelixToolkit.UWP.Element3D);
            _typeTable[59] = typeof(global::HelixToolkit.UWP.Model.Element3DCore);
            _typeTable[60] = typeof(global::Windows.UI.Color);
            _typeTable[61] = typeof(global::HelixToolkit.UWP.Camera);
            _typeTable[62] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[63] = typeof(global::HelixToolkit.UWP.FXAALevel);
            _typeTable[64] = typeof(global::SharpDX.Vector3);
            _typeTable[65] = typeof(global::HelixToolkit.UWP.Cameras.CameraCore);
            _typeTable[66] = typeof(global::HelixToolkit.UWP.Model.ObservableObject);
            _typeTable[67] = typeof(global::System.Collections.Generic.IEnumerable<global::HelixToolkit.UWP.Model.Scene2D.SceneNode2D>);
            _typeTable[68] = typeof(global::HelixToolkit.UWP.ProjectionCamera);
            _typeTable[69] = typeof(global::System.String);
            _typeTable[70] = typeof(global::System.Double);
            _typeTable[71] = typeof(global::System.IO.Stream);
            _typeTable[72] = typeof(global::HelixToolkit.UWP.CameraMode);
            _typeTable[73] = typeof(global::HelixToolkit.UWP.CameraRotationMode);
            _typeTable[74] = typeof(global::Windows.UI.Core.CoreCursorType);
            _typeTable[75] = typeof(global::HelixToolkit.UWP.InputController);
            _typeTable[76] = typeof(global::System.Exception);
            _typeTable[77] = typeof(global::HelixToolkit.UWP.OITWeightMode);
            _typeTable[78] = typeof(global::JoystickUserControl.Joystick);
            _typeTable[79] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[80] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[81] = typeof(global::Windows.UI.Xaml.Media.DoubleCollection);
            _typeTable[82] = typeof(global::Windows.UI.Xaml.Media.PenLineCap);
            _typeTable[83] = typeof(global::JoystickUserControl.Joystick.JoystickTheme);
            _typeTable[84] = typeof(global::HelixToolkit.UWP.ShadowMap3D);
            _typeTable[85] = typeof(global::Windows.Foundation.Size);
            _typeTable[86] = typeof(global::HelixToolkit.UWP.IProjectionCameraModel);
            _typeTable[87] = typeof(global::HelixToolkit.UWP.DirectionalLight3D);
            _typeTable[88] = typeof(global::HelixToolkit.UWP.Light3D);
            _typeTable[89] = typeof(global::HelixToolkit.UWP.LightType);
            _typeTable[90] = typeof(global::HelixToolkit.UWP.EnvironmentMap3D);
            _typeTable[91] = typeof(global::HelixToolkit.UWP.GroupModel3D);
            _typeTable[92] = typeof(global::HelixToolkit.UWP.GroupElement3D);
            _typeTable[93] = typeof(global::HelixToolkit.UWP.IOctreeManagerWrapper);
            _typeTable[94] = typeof(global::System.Collections.Generic.IList<global::HelixToolkit.UWP.Element3D>);
            _typeTable[95] = typeof(global::HelixToolkit.UWP.MeshGeometryModel3D);
            _typeTable[96] = typeof(global::HelixToolkit.UWP.MaterialGeometryModel3D);
            _typeTable[97] = typeof(global::HelixToolkit.UWP.GeometryModel3D);
            _typeTable[98] = typeof(global::HelixToolkit.UWP.Geometry3D);
            _typeTable[99] = typeof(global::HelixToolkit.UWP.Material);
            _typeTable[100] = typeof(global::SharpDX.Direct3D11.CullMode);
            _typeTable[101] = typeof(global::System.Collections.Generic.IList<global::SharpDX.Matrix>);
            _typeTable[102] = typeof(global::SharpDX.Vector4);
            _typeTable[103] = typeof(global::SharpDX.Direct3D11.FillMode);
            _typeTable[104] = typeof(global::HelixToolkit.UWP.ParticleStormModel3D);
            _typeTable[105] = typeof(global::SharpDX.Direct3D11.BlendOption);
            _typeTable[106] = typeof(global::HelixToolkit.UWP.Utilities.IRandomVector);
            _typeTable[107] = typeof(global::SharpDX.Direct3D11.BlendOperation);
            _typeTable[108] = typeof(global::HelixToolkit.UWP.LineGeometryModel3D);
            _typeTable[109] = typeof(global::HelixToolkit.UWP.PostEffectMeshBorderHighlight);
            _typeTable[110] = typeof(global::HelixToolkit.UWP.PostEffectMeshOutlineBlur);
            _typeTable[111] = typeof(global::HelixToolkit.UWP.OutlineMode);
            _typeTable[112] = typeof(global::HelixToolkit.UWP.PointGeometryModel3D);
            _typeTable[113] = typeof(global::HelixToolkit.UWP.PointFigure);
            _typeTable[114] = typeof(global::HelixToolkit.UWP.GeometryModel3DOctreeManager);
            _typeTable[115] = typeof(global::HelixToolkit.UWP.OctreeManagerBaseWrapper);
            _typeTable[116] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[117] = typeof(global::HelixToolkit.UWP.IOctreeBasic);
            _typeTable[118] = typeof(global::System.Single);
            _typeTable[119] = typeof(global::HelixToolkit.UWP.IOctreeManager);
            _typeTable[120] = typeof(global::HelixToolkit.UWP.OctreeBuildParameter);
            _typeTable[121] = typeof(global::HelixToolkit.UWP.DynamicReflectionMap3D);
            _typeTable[122] = typeof(global::HelixToolkit.UWP.BillboardTextModel3D);
            _typeTable[123] = typeof(global::SharpDX.Direct3D11.SamplerStateDescription);
            _typeTable[124] = typeof(global::HelixToolkit.UWP.ItemsModel3D);
            _typeTable[125] = typeof(global::System.Collections.IEnumerable);
            _typeTable[126] = typeof(global::App1.MainPage);
            _typeTable[127] = typeof(global::Windows.UI.Xaml.Controls.Page);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ModelContainer3DX() { return new global::HelixToolkit.UWP.ModelContainer3DX(); }
        private object Activate_1_HelixItemsControl() { return new global::HelixToolkit.UWP.Controls.HelixItemsControl(); }
        private object Activate_5_LogWrapper() { return new global::HelixToolkit.Logger.LogWrapper(); }
        private object Activate_12_List() { return new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>>(); }
        private object Activate_18_List() { return new global::System.Collections.Generic.List<global::HelixToolkit.UWP.Model.Scene.SceneNode>(); }
        private object Activate_48_D2DTargetProxy() { return new global::HelixToolkit.UWP.Core2D.D2DTargetProxy(); }
        private object Activate_51_DX11RenderHostConfiguration() { return new global::HelixToolkit.UWP.DX11RenderHostConfiguration(); }
        private object Activate_53_Viewport3DX() { return new global::HelixToolkit.UWP.Viewport3DX(); }
        private object Activate_55_ObservableElement3DCollection() { return new global::HelixToolkit.UWP.ObservableElement3DCollection(); }
        private object Activate_56_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.UWP.Element3D>(); }
        private object Activate_57_Collection() { return new global::System.Collections.ObjectModel.Collection<global::HelixToolkit.UWP.Element3D>(); }
        private object Activate_75_InputController() { return new global::HelixToolkit.UWP.InputController(); }
        private object Activate_76_Exception() { return new global::System.Exception(); }
        private object Activate_78_Joystick() { return new global::JoystickUserControl.Joystick(); }
        private object Activate_84_ShadowMap3D() { return new global::HelixToolkit.UWP.ShadowMap3D(); }
        private object Activate_87_DirectionalLight3D() { return new global::HelixToolkit.UWP.DirectionalLight3D(); }
        private object Activate_90_EnvironmentMap3D() { return new global::HelixToolkit.UWP.EnvironmentMap3D(); }
        private object Activate_91_GroupModel3D() { return new global::HelixToolkit.UWP.GroupModel3D(); }
        private object Activate_95_MeshGeometryModel3D() { return new global::HelixToolkit.UWP.MeshGeometryModel3D(); }
        private object Activate_104_ParticleStormModel3D() { return new global::HelixToolkit.UWP.ParticleStormModel3D(); }
        private object Activate_108_LineGeometryModel3D() { return new global::HelixToolkit.UWP.LineGeometryModel3D(); }
        private object Activate_109_PostEffectMeshBorderHighlight() { return new global::HelixToolkit.UWP.PostEffectMeshBorderHighlight(); }
        private object Activate_110_PostEffectMeshOutlineBlur() { return new global::HelixToolkit.UWP.PostEffectMeshOutlineBlur(); }
        private object Activate_112_PointGeometryModel3D() { return new global::HelixToolkit.UWP.PointGeometryModel3D(); }
        private object Activate_114_GeometryModel3DOctreeManager() { return new global::HelixToolkit.UWP.GeometryModel3DOctreeManager(); }
        private object Activate_120_OctreeBuildParameter() { return new global::HelixToolkit.UWP.OctreeBuildParameter(); }
        private object Activate_121_DynamicReflectionMap3D() { return new global::HelixToolkit.UWP.DynamicReflectionMap3D(); }
        private object Activate_122_BillboardTextModel3D() { return new global::HelixToolkit.UWP.BillboardTextModel3D(); }
        private object Activate_124_ItemsModel3D() { return new global::HelixToolkit.UWP.ItemsModel3D(); }
        private object Activate_126_MainPage() { return new global::App1.MainPage(); }
        private void VectorAdd_12_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>>)instance;
            var newItem = (global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_18_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Model.Scene.SceneNode>)instance;
            var newItem = (global::HelixToolkit.UWP.Model.Scene.SceneNode)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Model.Scene.SceneNode>)instance;
            var newItem = (global::HelixToolkit.UWP.Model.Scene.SceneNode)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_ObservableElement3DCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Element3D>)instance;
            var newItem = (global::HelixToolkit.UWP.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_56_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Element3D>)instance;
            var newItem = (global::HelixToolkit.UWP.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_57_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Element3D>)instance;
            var newItem = (global::HelixToolkit.UWP.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_94_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.UWP.Element3D>)instance;
            var newItem = (global::HelixToolkit.UWP.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SharpDX.Matrix>)instance;
            var newItem = (global::SharpDX.Matrix)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  HelixToolkit.UWP.ModelContainer3DX
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Controls.HelixItemsControl"));
                userType.Activator = Activate_0_ModelContainer3DX;
                userType.AddMemberName("EffectsManager");
                userType.AddMemberName("RenderTechnique");
                userType.AddMemberName("Logger");
                userType.AddMemberName("GUID");
                userType.AddMemberName("IsRendering");
                userType.AddMemberName("CurrentRenderHost");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("PerFrameFlattenedScene");
                userType.AddMemberName("PerFrameLights");
                userType.AddMemberName("PerFrameNodesWithPostEffect");
                userType.AddMemberName("PerFrameOpaqueNodes");
                userType.AddMemberName("PerFrameTransparentNodes");
                userType.AddMemberName("PerFrameParticleNodes");
                userType.AddMemberName("Renderables");
                userType.AddMemberName("Device");
                userType.AddMemberName("Device2D");
                userType.AddMemberName("ClearColor");
                userType.AddMemberName("IsShadowMapEnabled");
                userType.AddMemberName("MSAA");
                userType.AddMemberName("FeatureLevel");
                userType.AddMemberName("Viewport");
                userType.AddMemberName("RenderContext");
                userType.AddMemberName("IsBusy");
                userType.AddMemberName("EnableRenderFrustum");
                userType.AddMemberName("MaxFPS");
                userType.AddMemberName("IsDeferredLighting");
                userType.AddMemberName("SharedModelContainer");
                userType.AddMemberName("EnableSharingModelMode");
                userType.AddMemberName("RenderTargetBufferView");
                userType.AddMemberName("DepthStencilBufferView");
                userType.AddMemberName("D2DTarget");
                userType.AddMemberName("RenderStatistics");
                userType.AddMemberName("ShowRenderDetail");
                userType.AddMemberName("RenderConfiguration");
                userType.AddMemberName("RenderBuffer");
                xamlType = userType;
                break;

            case 1:   //  HelixToolkit.UWP.Controls.HelixItemsControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_1_HelixItemsControl;
                xamlType = userType;
                break;

            case 2:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  HelixToolkit.UWP.IEffectsManager
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  HelixToolkit.UWP.IRenderTechnique
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  HelixToolkit.Logger.LogWrapper
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Guid
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.ValueType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  Boolean
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  HelixToolkit.UWP.IRenderHost
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  HelixToolkit.UWP.Render.IRenderer
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_12_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Key");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 14:   //  Int32
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  HelixToolkit.UWP.Model.Scene.SceneNode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.DisposeObject"));
                userType.AddMemberName("GUID");
                userType.AddMemberName("RenderOrderKey");
                userType.AddMemberName("RenderOrder");
                userType.AddMemberName("ModelMatrix");
                userType.AddMemberName("Parent");
                userType.AddMemberName("Visible");
                userType.AddMemberName("IsRenderable");
                userType.AddMemberName("IsAttached");
                userType.AddMemberName("RenderHost");
                userType.AddMemberName("Items");
                userType.AddMemberName("IsHitTestVisible");
                userType.AddMemberName("RenderType");
                userType.AddMemberName("EffectTechnique");
                userType.AddMemberName("RenderCore");
                userType.AddMemberName("WrapperSource");
                userType.AddMemberName("OriginalBounds");
                userType.AddMemberName("OriginalBoundsSphere");
                userType.AddMemberName("Bounds");
                userType.AddMemberName("BoundsWithTransform");
                userType.AddMemberName("BoundsSphere");
                userType.AddMemberName("BoundsSphereWithTransform");
                userType.AddMemberName("HasBound");
                userType.AddMemberName("PostEffectNames");
                userType.AddMemberName("HasAnyPostEffect");
                xamlType = userType;
                break;

            case 16:   //  HelixToolkit.UWP.DisposeObject
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Count");
                userType.AddMemberName("IsDisposed");
                userType.AddMemberName("DisablePropertyChangedEvent");
                xamlType = userType;
                break;

            case 17:   //  System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.LightNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_18_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  HelixToolkit.UWP.Model.OrderKey
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  UInt16
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  SharpDX.Matrix
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Up");
                userType.AddMemberName("Down");
                userType.AddMemberName("Right");
                userType.AddMemberName("Left");
                userType.AddMemberName("Forward");
                userType.AddMemberName("Backward");
                userType.AddMemberName("Row1");
                userType.AddMemberName("Row2");
                userType.AddMemberName("Row3");
                userType.AddMemberName("Row4");
                userType.AddMemberName("Column1");
                userType.AddMemberName("Column2");
                userType.AddMemberName("Column3");
                userType.AddMemberName("Column4");
                userType.AddMemberName("TranslationVector");
                userType.AddMemberName("ScaleVector");
                userType.AddMemberName("IsIdentity");
                xamlType = userType;
                break;

            case 22:   //  System.Collections.Generic.IList`1<HelixToolkit.UWP.Model.Scene.SceneNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_22_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  HelixToolkit.UWP.RenderType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::HelixToolkit.UWP.RenderType.None);
                userType.AddEnumValue("Light", global::HelixToolkit.UWP.RenderType.Light);
                userType.AddEnumValue("PreProc", global::HelixToolkit.UWP.RenderType.PreProc);
                userType.AddEnumValue("Opaque", global::HelixToolkit.UWP.RenderType.Opaque);
                userType.AddEnumValue("Particle", global::HelixToolkit.UWP.RenderType.Particle);
                userType.AddEnumValue("Transparent", global::HelixToolkit.UWP.RenderType.Transparent);
                userType.AddEnumValue("PostProc", global::HelixToolkit.UWP.RenderType.PostProc);
                userType.AddEnumValue("ScreenSpaced", global::HelixToolkit.UWP.RenderType.ScreenSpaced);
                xamlType = userType;
                break;

            case 24:   //  System.Enum
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 25:   //  HelixToolkit.UWP.Core.RenderCore
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  SharpDX.BoundingBox
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  SharpDX.BoundingSphere
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  System.Collections.Generic.IEnumerable`1<String>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.SceneNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  SharpDX.Direct3D11.Device1
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.Direct3D11.Device"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  SharpDX.Direct3D11.Device
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.ComObject"));
                xamlType = userType;
                break;

            case 32:   //  SharpDX.ComObject
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.CppObject"));
                xamlType = userType;
                break;

            case 33:   //  SharpDX.CppObject
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.DisposeBase"));
                xamlType = userType;
                break;

            case 34:   //  SharpDX.DisposeBase
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 35:   //  SharpDX.Direct2D1.Device
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.Direct2D1.Resource"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  SharpDX.Direct2D1.Resource
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.ComObject"));
                xamlType = userType;
                break;

            case 37:   //  SharpDX.Color4
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  HelixToolkit.UWP.MSAALevel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disable", global::HelixToolkit.UWP.MSAALevel.Disable);
                userType.AddEnumValue("Maximum", global::HelixToolkit.UWP.MSAALevel.Maximum);
                userType.AddEnumValue("Two", global::HelixToolkit.UWP.MSAALevel.Two);
                userType.AddEnumValue("Four", global::HelixToolkit.UWP.MSAALevel.Four);
                userType.AddEnumValue("Eight", global::HelixToolkit.UWP.MSAALevel.Eight);
                xamlType = userType;
                break;

            case 39:   //  SharpDX.Direct3D.FeatureLevel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Level_9_1", global::SharpDX.Direct3D.FeatureLevel.Level_9_1);
                userType.AddEnumValue("Level_9_2", global::SharpDX.Direct3D.FeatureLevel.Level_9_2);
                userType.AddEnumValue("Level_9_3", global::SharpDX.Direct3D.FeatureLevel.Level_9_3);
                userType.AddEnumValue("Level_10_0", global::SharpDX.Direct3D.FeatureLevel.Level_10_0);
                userType.AddEnumValue("Level_10_1", global::SharpDX.Direct3D.FeatureLevel.Level_10_1);
                userType.AddEnumValue("Level_11_0", global::SharpDX.Direct3D.FeatureLevel.Level_11_0);
                userType.AddEnumValue("Level_11_1", global::SharpDX.Direct3D.FeatureLevel.Level_11_1);
                userType.AddEnumValue("Level_12_0", global::SharpDX.Direct3D.FeatureLevel.Level_12_0);
                userType.AddEnumValue("Level_12_1", global::SharpDX.Direct3D.FeatureLevel.Level_12_1);
                xamlType = userType;
                break;

            case 40:   //  HelixToolkit.UWP.IViewport3DX
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  HelixToolkit.UWP.RenderContext
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  UInt32
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  HelixToolkit.UWP.IModelContainer
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  SharpDX.Direct3D11.RenderTargetView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.Direct3D11.ResourceView"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  SharpDX.Direct3D11.ResourceView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.Direct3D11.DeviceChild"));
                xamlType = userType;
                break;

            case 46:   //  SharpDX.Direct3D11.DeviceChild
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.ComObject"));
                xamlType = userType;
                break;

            case 47:   //  SharpDX.Direct3D11.DepthStencilView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SharpDX.Direct3D11.ResourceView"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  HelixToolkit.UWP.Core2D.D2DTargetProxy
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  HelixToolkit.UWP.Utilities.IRenderStatistics
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  HelixToolkit.UWP.RenderDetail
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::HelixToolkit.UWP.RenderDetail.None);
                userType.AddEnumValue("FPS", global::HelixToolkit.UWP.RenderDetail.FPS);
                userType.AddEnumValue("Statistics", global::HelixToolkit.UWP.RenderDetail.Statistics);
                userType.AddEnumValue("TriangleInfo", global::HelixToolkit.UWP.RenderDetail.TriangleInfo);
                userType.AddEnumValue("Camera", global::HelixToolkit.UWP.RenderDetail.Camera);
                xamlType = userType;
                break;

            case 51:   //  HelixToolkit.UWP.DX11RenderHostConfiguration
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  HelixToolkit.UWP.Render.DX11RenderBufferProxyBase
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  HelixToolkit.UWP.Viewport3DX
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_53_Viewport3DX;
                userType.SetContentPropertyName("HelixToolkit.UWP.Viewport3DX.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("Camera");
                userType.AddMemberName("EnableAutoOctreeUpdate");
                userType.AddMemberName("EnableDeferredRendering");
                userType.AddMemberName("EnableDesignModeRendering");
                userType.AddMemberName("EnableSharedModelMode");
                userType.AddMemberName("FXAALevel");
                userType.AddMemberName("IsShadowMappingEnabled");
                userType.AddMemberName("ModelUpDirection");
                userType.AddMemberName("SharedModelContainer");
                userType.AddMemberName("ShowCoordinateSystem");
                userType.AddMemberName("ShowFrameDetails");
                userType.AddMemberName("ShowFrameRate");
                userType.AddMemberName("RenderHost");
                userType.AddMemberName("CameraCore");
                userType.AddMemberName("Renderables");
                userType.AddMemberName("D2DRenderables");
                userType.AddMemberName("RenderContext");
                userType.AddMemberName("RenderTechnique");
                userType.AddMemberName("EffectsManager");
                userType.AddMemberName("DefaultCamera");
                userType.AddMemberName("MessageText");
                userType.AddMemberName("CoordinateSystemHorizontalPosition");
                userType.AddMemberName("CoordinateSystemLabelForeground");
                userType.AddMemberName("CoordinateSystemLabelX");
                userType.AddMemberName("CoordinateSystemLabelY");
                userType.AddMemberName("CoordinateSystemLabelZ");
                userType.AddMemberName("CoordinateSystemVerticalPosition");
                userType.AddMemberName("CoordinateSystemSize");
                userType.AddMemberName("ShowViewCube");
                userType.AddMemberName("ViewCubeTexture");
                userType.AddMemberName("ViewCubeHorizontalPosition");
                userType.AddMemberName("IsViewCubeEdgeClicksEnabled");
                userType.AddMemberName("ViewCubeVerticalPosition");
                userType.AddMemberName("ViewCubeSize");
                userType.AddMemberName("CameraMode");
                userType.AddMemberName("CameraRotationMode");
                userType.AddMemberName("LeftRightRotationSensitivity");
                userType.AddMemberName("LeftRightPanSensitivity");
                userType.AddMemberName("RotationSensitivity");
                userType.AddMemberName("UpDownPanSensitivity");
                userType.AddMemberName("UpDownRotationSensitivity");
                userType.AddMemberName("ZoomSensitivity");
                userType.AddMemberName("SpinReleaseTime");
                userType.AddMemberName("FixedRotationPoint");
                userType.AddMemberName("FixedRotationPointEnabled");
                userType.AddMemberName("IsPanEnabled");
                userType.AddMemberName("IsInertiaEnabled");
                userType.AddMemberName("IsRotationEnabled");
                userType.AddMemberName("IsTouchRotateEnabled");
                userType.AddMemberName("IsPinchZoomEnabled");
                userType.AddMemberName("IsThreeFingerPanningEnabled");
                userType.AddMemberName("IsZoomEnabled");
                userType.AddMemberName("PanCursor");
                userType.AddMemberName("RotateCursor");
                userType.AddMemberName("RotateAroundMouseDownPoint");
                userType.AddMemberName("ZoomAroundMouseDownPoint");
                userType.AddMemberName("IsChangeFieldOfViewEnabled");
                userType.AddMemberName("MaximumFieldOfView");
                userType.AddMemberName("MinimumFieldOfView");
                userType.AddMemberName("ZoomCursor");
                userType.AddMemberName("ZoomDistanceLimitFar");
                userType.AddMemberName("ZoomDistanceLimitNear");
                userType.AddMemberName("ZoomRectangleCursor");
                userType.AddMemberName("IsMoveEnabled");
                userType.AddMemberName("CameraInertiaFactor");
                userType.AddMemberName("InfiniteSpin");
                userType.AddMemberName("InputController");
                userType.AddMemberName("PageUpDownZoomSensitivity");
                userType.AddMemberName("MoveSensitivity");
                userType.AddMemberName("MSAA");
                userType.AddMemberName("EnableMouseButtonHitTest");
                userType.AddMemberName("ManualLookAtPoint");
                userType.AddMemberName("EnableRenderFrustum");
                userType.AddMemberName("RenderException");
                userType.AddMemberName("FrameRate");
                userType.AddMemberName("EnableOITRendering");
                userType.AddMemberName("OITWeightPower");
                userType.AddMemberName("OITWeightDepthSlope");
                userType.AddMemberName("OITWeightMode");
                userType.AddMemberName("ShowCameraInfo");
                userType.AddMemberName("ShowTriangleCountInfo");
                userType.AddMemberName("RenderDetailOutput");
                userType.AddMemberName("EnableRenderOrder");
                xamlType = userType;
                break;

            case 54:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  HelixToolkit.UWP.ObservableElement3DCollection
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.UWP.Element3D>"));
                userType.CollectionAdd = VectorAdd_55_ObservableElement3DCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.UWP.Element3D>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<HelixToolkit.UWP.Element3D>"));
                userType.Activator = Activate_56_ObservableCollection;
                userType.CollectionAdd = VectorAdd_56_ObservableCollection;
                xamlType = userType;
                break;

            case 57:   //  System.Collections.ObjectModel.Collection`1<HelixToolkit.UWP.Element3D>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_Collection;
                userType.CollectionAdd = VectorAdd_57_Collection;
                xamlType = userType;
                break;

            case 58:   //  HelixToolkit.UWP.Element3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore"));
                userType.AddMemberName("IsRendering");
                userType.AddMemberName("Transform3D");
                userType.AddMemberName("RenderOrder");
                xamlType = userType;
                break;

            case 59:   //  HelixToolkit.UWP.Model.Element3DCore
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.AddMemberName("GUID");
                userType.AddMemberName("TotalModelMatrix");
                userType.AddMemberName("Visible");
                userType.AddMemberName("IsAttached");
                userType.AddMemberName("SceneNode");
                userType.AddMemberName("Bounds");
                userType.AddMemberName("BoundsWithTransform");
                userType.AddMemberName("BoundsSphere");
                userType.AddMemberName("BoundsSphereWithTransform");
                xamlType = userType;
                break;

            case 60:   //  Windows.UI.Color
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  HelixToolkit.UWP.Camera
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 62:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  HelixToolkit.UWP.FXAALevel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::HelixToolkit.UWP.FXAALevel.None);
                userType.AddEnumValue("Low", global::HelixToolkit.UWP.FXAALevel.Low);
                userType.AddEnumValue("Medium", global::HelixToolkit.UWP.FXAALevel.Medium);
                userType.AddEnumValue("High", global::HelixToolkit.UWP.FXAALevel.High);
                userType.AddEnumValue("Ultra", global::HelixToolkit.UWP.FXAALevel.Ultra);
                xamlType = userType;
                break;

            case 64:   //  SharpDX.Vector3
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  HelixToolkit.UWP.Cameras.CameraCore
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  HelixToolkit.UWP.Model.ObservableObject
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 67:   //  System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene2D.SceneNode2D>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  HelixToolkit.UWP.ProjectionCamera
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Camera"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  String
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 70:   //  Double
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 71:   //  System.IO.Stream
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 72:   //  HelixToolkit.UWP.CameraMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Inspect", global::HelixToolkit.UWP.CameraMode.Inspect);
                userType.AddEnumValue("WalkAround", global::HelixToolkit.UWP.CameraMode.WalkAround);
                userType.AddEnumValue("FixedPosition", global::HelixToolkit.UWP.CameraMode.FixedPosition);
                xamlType = userType;
                break;

            case 73:   //  HelixToolkit.UWP.CameraRotationMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Turntable", global::HelixToolkit.UWP.CameraRotationMode.Turntable);
                userType.AddEnumValue("Turnball", global::HelixToolkit.UWP.CameraRotationMode.Turnball);
                userType.AddEnumValue("Trackball", global::HelixToolkit.UWP.CameraRotationMode.Trackball);
                xamlType = userType;
                break;

            case 74:   //  Windows.UI.Core.CoreCursorType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                userType.AddEnumValue("Pin", global::Windows.UI.Core.CoreCursorType.Pin);
                userType.AddEnumValue("Person", global::Windows.UI.Core.CoreCursorType.Person);
                xamlType = userType;
                break;

            case 75:   //  HelixToolkit.UWP.InputController
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 76:   //  System.Exception
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 77:   //  HelixToolkit.UWP.OITWeightMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Linear0", global::HelixToolkit.UWP.OITWeightMode.Linear0);
                userType.AddEnumValue("Linear1", global::HelixToolkit.UWP.OITWeightMode.Linear1);
                userType.AddEnumValue("Linear2", global::HelixToolkit.UWP.OITWeightMode.Linear2);
                userType.AddEnumValue("NonLinear", global::HelixToolkit.UWP.OITWeightMode.NonLinear);
                xamlType = userType;
                break;

            case 78:   //  JoystickUserControl.Joystick
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_78_Joystick;
                userType.AddMemberName("XValue");
                userType.AddMemberName("YValue");
                userType.AddMemberName("OuterDiameter");
                userType.AddMemberName("InnerDiameter");
                userType.AddMemberName("InnerFill");
                userType.AddMemberName("InnerStroke");
                userType.AddMemberName("InnerStrokeThickness");
                userType.AddMemberName("InnerStrokeDashOffset");
                userType.AddMemberName("InnerStrokeDashArray");
                userType.AddMemberName("InnerStrokeDashCap");
                userType.AddMemberName("OuterFill");
                userType.AddMemberName("OuterStroke");
                userType.AddMemberName("OuterStrokeThickness");
                userType.AddMemberName("OuterStrokeDashArray");
                userType.AddMemberName("OuterStrokeDashOffset");
                userType.AddMemberName("OuterStrokeDashCap");
                userType.AddMemberName("Theme");
                xamlType = userType;
                break;

            case 79:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 80:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  Windows.UI.Xaml.Media.DoubleCollection
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 82:   //  Windows.UI.Xaml.Media.PenLineCap
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 83:   //  JoystickUserControl.Joystick.JoystickTheme
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("AccentTheme", global::JoystickUserControl.Joystick.JoystickTheme.AccentTheme);
                userType.AddEnumValue("Dark", global::JoystickUserControl.Joystick.JoystickTheme.Dark);
                userType.AddEnumValue("Light", global::JoystickUserControl.Joystick.JoystickTheme.Light);
                xamlType = userType;
                break;

            case 84:   //  HelixToolkit.UWP.ShadowMap3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.Activator = Activate_84_ShadowMap3D;
                userType.AddMemberName("Distance");
                userType.AddMemberName("OrthoWidth");
                userType.AddMemberName("Resolution");
                userType.AddMemberName("Bias");
                userType.AddMemberName("Intensity");
                userType.AddMemberName("NearFieldDistance");
                userType.AddMemberName("FarFieldDistance");
                userType.AddMemberName("LightCamera");
                xamlType = userType;
                break;

            case 85:   //  Windows.Foundation.Size
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 86:   //  HelixToolkit.UWP.IProjectionCameraModel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 87:   //  HelixToolkit.UWP.DirectionalLight3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Light3D"));
                userType.Activator = Activate_87_DirectionalLight3D;
                userType.AddMemberName("Direction");
                xamlType = userType;
                break;

            case 88:   //  HelixToolkit.UWP.Light3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.AddMemberName("Color");
                userType.AddMemberName("LightType");
                xamlType = userType;
                break;

            case 89:   //  HelixToolkit.UWP.LightType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ambient", global::HelixToolkit.UWP.LightType.Ambient);
                userType.AddEnumValue("Directional", global::HelixToolkit.UWP.LightType.Directional);
                userType.AddEnumValue("Point", global::HelixToolkit.UWP.LightType.Point);
                userType.AddEnumValue("Spot", global::HelixToolkit.UWP.LightType.Spot);
                userType.AddEnumValue("ThreePoint", global::HelixToolkit.UWP.LightType.ThreePoint);
                userType.AddEnumValue("None", global::HelixToolkit.UWP.LightType.None);
                xamlType = userType;
                break;

            case 90:   //  HelixToolkit.UWP.EnvironmentMap3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.Activator = Activate_90_EnvironmentMap3D;
                userType.AddMemberName("Texture");
                xamlType = userType;
                break;

            case 91:   //  HelixToolkit.UWP.GroupModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GroupElement3D"));
                userType.Activator = Activate_91_GroupModel3D;
                userType.SetContentPropertyName("HelixToolkit.UWP.GroupElement3D.Children");
                xamlType = userType;
                break;

            case 92:   //  HelixToolkit.UWP.GroupElement3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.SetContentPropertyName("HelixToolkit.UWP.GroupElement3D.Children");
                userType.AddMemberName("Children");
                userType.AddMemberName("OctreeManager");
                userType.AddMemberName("ItemsSource");
                xamlType = userType;
                break;

            case 93:   //  HelixToolkit.UWP.IOctreeManagerWrapper
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 94:   //  System.Collections.Generic.IList`1<HelixToolkit.UWP.Element3D>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_94_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 95:   //  HelixToolkit.UWP.MeshGeometryModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.MaterialGeometryModel3D"));
                userType.Activator = Activate_95_MeshGeometryModel3D;
                userType.AddMemberName("RenderWireframe");
                userType.AddMemberName("CullMode");
                userType.AddMemberName("WireframeColor");
                userType.AddMemberName("FrontCounterClockwise");
                userType.AddMemberName("InvertNormal");
                xamlType = userType;
                break;

            case 96:   //  HelixToolkit.UWP.MaterialGeometryModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D"));
                userType.AddMemberName("IsTransparent");
                userType.AddMemberName("Material");
                xamlType = userType;
                break;

            case 97:   //  HelixToolkit.UWP.GeometryModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.AddMemberName("DepthBias");
                userType.AddMemberName("Geometry");
                userType.AddMemberName("IsThrowingShadow");
                userType.AddMemberName("PostEffects");
                userType.AddMemberName("Instances");
                userType.AddMemberName("SlopeScaledDepthBias");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("IsMultisampleEnabled");
                userType.AddMemberName("FillMode");
                userType.AddMemberName("IsScissorEnabled");
                userType.AddMemberName("IsDepthClipEnabled");
                userType.AddMemberName("EnableViewFrustumCheck");
                xamlType = userType;
                break;

            case 98:   //  HelixToolkit.UWP.Geometry3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 99:   //  HelixToolkit.UWP.Material
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 100:   //  SharpDX.Direct3D11.CullMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::SharpDX.Direct3D11.CullMode.None);
                userType.AddEnumValue("Front", global::SharpDX.Direct3D11.CullMode.Front);
                userType.AddEnumValue("Back", global::SharpDX.Direct3D11.CullMode.Back);
                xamlType = userType;
                break;

            case 101:   //  System.Collections.Generic.IList`1<SharpDX.Matrix>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_101_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  SharpDX.Vector4
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 103:   //  SharpDX.Direct3D11.FillMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Wireframe", global::SharpDX.Direct3D11.FillMode.Wireframe);
                userType.AddEnumValue("Solid", global::SharpDX.Direct3D11.FillMode.Solid);
                xamlType = userType;
                break;

            case 104:   //  HelixToolkit.UWP.ParticleStormModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.Activator = Activate_104_ParticleStormModel3D;
                userType.AddMemberName("Acceleration");
                userType.AddMemberName("AnimateSpriteByEnergy");
                userType.AddMemberName("BlendColor");
                userType.AddMemberName("ConsumerLocation");
                userType.AddMemberName("ConsumerRadius");
                userType.AddMemberName("DestAlphaBlend");
                userType.AddMemberName("DestBlend");
                userType.AddMemberName("EmitterLocation");
                userType.AddMemberName("EmitterRadius");
                userType.AddMemberName("EnergyDissipationRate");
                userType.AddMemberName("InitialEnergy");
                userType.AddMemberName("Instances");
                userType.AddMemberName("NumTextureColumn");
                userType.AddMemberName("NumTextureRow");
                userType.AddMemberName("ParticleBounds");
                userType.AddMemberName("ParticleCount");
                userType.AddMemberName("ParticleSize");
                userType.AddMemberName("ParticleTexture");
                userType.AddMemberName("SourceAlphaBlend");
                userType.AddMemberName("SourceBlend");
                userType.AddMemberName("Turbulance");
                userType.AddMemberName("ConsumerGravity");
                userType.AddMemberName("RandomVectorGenerator");
                userType.AddMemberName("InitialVelocity");
                userType.AddMemberName("CumulateAtBound");
                userType.AddMemberName("Blend");
                userType.AddMemberName("AlphaBlend");
                userType.AddMemberName("BlendFactor");
                userType.AddMemberName("SampleMask");
                xamlType = userType;
                break;

            case 105:   //  SharpDX.Direct3D11.BlendOption
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Zero", global::SharpDX.Direct3D11.BlendOption.Zero);
                userType.AddEnumValue("One", global::SharpDX.Direct3D11.BlendOption.One);
                userType.AddEnumValue("SourceColor", global::SharpDX.Direct3D11.BlendOption.SourceColor);
                userType.AddEnumValue("InverseSourceColor", global::SharpDX.Direct3D11.BlendOption.InverseSourceColor);
                userType.AddEnumValue("SourceAlpha", global::SharpDX.Direct3D11.BlendOption.SourceAlpha);
                userType.AddEnumValue("InverseSourceAlpha", global::SharpDX.Direct3D11.BlendOption.InverseSourceAlpha);
                userType.AddEnumValue("DestinationAlpha", global::SharpDX.Direct3D11.BlendOption.DestinationAlpha);
                userType.AddEnumValue("InverseDestinationAlpha", global::SharpDX.Direct3D11.BlendOption.InverseDestinationAlpha);
                userType.AddEnumValue("DestinationColor", global::SharpDX.Direct3D11.BlendOption.DestinationColor);
                userType.AddEnumValue("InverseDestinationColor", global::SharpDX.Direct3D11.BlendOption.InverseDestinationColor);
                userType.AddEnumValue("SourceAlphaSaturate", global::SharpDX.Direct3D11.BlendOption.SourceAlphaSaturate);
                userType.AddEnumValue("BlendFactor", global::SharpDX.Direct3D11.BlendOption.BlendFactor);
                userType.AddEnumValue("InverseBlendFactor", global::SharpDX.Direct3D11.BlendOption.InverseBlendFactor);
                userType.AddEnumValue("SecondarySourceColor", global::SharpDX.Direct3D11.BlendOption.SecondarySourceColor);
                userType.AddEnumValue("InverseSecondarySourceColor", global::SharpDX.Direct3D11.BlendOption.InverseSecondarySourceColor);
                userType.AddEnumValue("SecondarySourceAlpha", global::SharpDX.Direct3D11.BlendOption.SecondarySourceAlpha);
                userType.AddEnumValue("InverseSecondarySourceAlpha", global::SharpDX.Direct3D11.BlendOption.InverseSecondarySourceAlpha);
                xamlType = userType;
                break;

            case 106:   //  HelixToolkit.UWP.Utilities.IRandomVector
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 107:   //  SharpDX.Direct3D11.BlendOperation
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Add", global::SharpDX.Direct3D11.BlendOperation.Add);
                userType.AddEnumValue("Subtract", global::SharpDX.Direct3D11.BlendOperation.Subtract);
                userType.AddEnumValue("ReverseSubtract", global::SharpDX.Direct3D11.BlendOperation.ReverseSubtract);
                userType.AddEnumValue("Minimum", global::SharpDX.Direct3D11.BlendOperation.Minimum);
                userType.AddEnumValue("Maximum", global::SharpDX.Direct3D11.BlendOperation.Maximum);
                xamlType = userType;
                break;

            case 108:   //  HelixToolkit.UWP.LineGeometryModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D"));
                userType.Activator = Activate_108_LineGeometryModel3D;
                userType.AddMemberName("Color");
                userType.AddMemberName("Thickness");
                userType.AddMemberName("Smoothness");
                userType.AddMemberName("HitTestThickness");
                xamlType = userType;
                break;

            case 109:   //  HelixToolkit.UWP.PostEffectMeshBorderHighlight
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur"));
                userType.Activator = Activate_109_PostEffectMeshBorderHighlight;
                userType.AddMemberName("DrawMode");
                xamlType = userType;
                break;

            case 110:   //  HelixToolkit.UWP.PostEffectMeshOutlineBlur
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.Activator = Activate_110_PostEffectMeshOutlineBlur;
                userType.AddMemberName("EffectName");
                userType.AddMemberName("NumberOfBlurPass");
                userType.AddMemberName("Color");
                userType.AddMemberName("ScaleX");
                userType.AddMemberName("ScaleY");
                xamlType = userType;
                break;

            case 111:   //  HelixToolkit.UWP.OutlineMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Merged", global::HelixToolkit.UWP.OutlineMode.Merged);
                userType.AddEnumValue("Separated", global::HelixToolkit.UWP.OutlineMode.Separated);
                xamlType = userType;
                break;

            case 112:   //  HelixToolkit.UWP.PointGeometryModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D"));
                userType.Activator = Activate_112_PointGeometryModel3D;
                userType.AddMemberName("Color");
                userType.AddMemberName("Size");
                userType.AddMemberName("Figure");
                userType.AddMemberName("FigureRatio");
                userType.AddMemberName("HitTestThickness");
                xamlType = userType;
                break;

            case 113:   //  HelixToolkit.UWP.PointFigure
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Rect", global::HelixToolkit.UWP.PointFigure.Rect);
                userType.AddEnumValue("Ellipse", global::HelixToolkit.UWP.PointFigure.Ellipse);
                userType.AddEnumValue("Cross", global::HelixToolkit.UWP.PointFigure.Cross);
                xamlType = userType;
                break;

            case 114:   //  HelixToolkit.UWP.GeometryModel3DOctreeManager
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper"));
                userType.Activator = Activate_114_GeometryModel3DOctreeManager;
                xamlType = userType;
                break;

            case 115:   //  HelixToolkit.UWP.OctreeManagerBaseWrapper
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.AddMemberName("Octree");
                userType.AddMemberName("EnableOctreeOutput");
                userType.AddMemberName("MinSize");
                userType.AddMemberName("AutoDeleteIfEmpty");
                userType.AddMemberName("Cubify");
                userType.AddMemberName("RecordHitPathBoundingBoxes");
                userType.AddMemberName("MinObjectSizeToSplit");
                userType.AddMemberName("Manager");
                userType.AddMemberName("Enabled");
                userType.AddMemberName("Parameter");
                xamlType = userType;
                break;

            case 116:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 117:   //  HelixToolkit.UWP.IOctreeBasic
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 118:   //  Single
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 119:   //  HelixToolkit.UWP.IOctreeManager
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 120:   //  HelixToolkit.UWP.OctreeBuildParameter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 121:   //  HelixToolkit.UWP.DynamicReflectionMap3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GroupModel3D"));
                userType.Activator = Activate_121_DynamicReflectionMap3D;
                userType.SetContentPropertyName("HelixToolkit.UWP.GroupElement3D.Children");
                userType.AddMemberName("EnableReflector");
                userType.AddMemberName("Size");
                userType.AddMemberName("FarField");
                userType.AddMemberName("NearField");
                userType.AddMemberName("IsLeftHanded");
                xamlType = userType;
                break;

            case 122:   //  HelixToolkit.UWP.BillboardTextModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D"));
                userType.Activator = Activate_122_BillboardTextModel3D;
                userType.AddMemberName("IsTransparent");
                userType.AddMemberName("FixedSize");
                userType.AddMemberName("SamplerDescription");
                xamlType = userType;
                break;

            case 123:   //  SharpDX.Direct3D11.SamplerStateDescription
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 124:   //  HelixToolkit.UWP.ItemsModel3D
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.UWP.Element3D"));
                userType.Activator = Activate_124_ItemsModel3D;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("OctreeManager");
                userType.AddMemberName("Children");
                xamlType = userType;
                break;

            case 125:   //  System.Collections.IEnumerable
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 126:   //  App1.MainPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_126_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 127:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::HelixToolkit.UWP.HelixToolkit_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::JoystickUserControl.JoystickUserControl_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ModelContainer3DX_EffectsManager(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.EffectsManager;
        }
        private void set_0_ModelContainer3DX_EffectsManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.EffectsManager = (global::HelixToolkit.UWP.IEffectsManager)Value;
        }
        private object get_1_ModelContainer3DX_RenderTechnique(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderTechnique;
        }
        private void set_1_ModelContainer3DX_RenderTechnique(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.RenderTechnique = (global::HelixToolkit.UWP.IRenderTechnique)Value;
        }
        private object get_2_ModelContainer3DX_Logger(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Logger;
        }
        private object get_3_ModelContainer3DX_GUID(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.GUID;
        }
        private object get_4_ModelContainer3DX_IsRendering(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.IsRendering;
        }
        private void set_4_ModelContainer3DX_IsRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.IsRendering = (global::System.Boolean)Value;
        }
        private object get_5_ModelContainer3DX_CurrentRenderHost(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.CurrentRenderHost;
        }
        private void set_5_ModelContainer3DX_CurrentRenderHost(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.CurrentRenderHost = (global::HelixToolkit.UWP.IRenderHost)Value;
        }
        private object get_6_ModelContainer3DX_Renderer(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Renderer;
        }
        private object get_7_ModelContainer3DX_PerFrameFlattenedScene(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameFlattenedScene;
        }
        private object get_8_KeyValuePair_Key(object instance)
        {
            var that = (global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>)instance;
            return that.Key;
        }
        private object get_9_KeyValuePair_Value(object instance)
        {
            var that = (global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::HelixToolkit.UWP.Model.Scene.SceneNode>)instance;
            return that.Value;
        }
        private object get_10_ModelContainer3DX_PerFrameLights(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameLights;
        }
        private object get_11_ModelContainer3DX_PerFrameNodesWithPostEffect(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameNodesWithPostEffect;
        }
        private object get_12_SceneNode_GUID(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.GUID;
        }
        private object get_13_SceneNode_RenderOrderKey(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.RenderOrderKey;
        }
        private object get_14_SceneNode_RenderOrder(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.RenderOrder;
        }
        private void set_14_SceneNode_RenderOrder(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            that.RenderOrder = (global::System.UInt16)Value;
        }
        private object get_15_SceneNode_ModelMatrix(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.ModelMatrix;
        }
        private void set_15_SceneNode_ModelMatrix(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            that.ModelMatrix = (global::SharpDX.Matrix)Value;
        }
        private object get_16_SceneNode_Parent(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.Parent;
        }
        private object get_17_SceneNode_Visible(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.Visible;
        }
        private object get_18_SceneNode_IsRenderable(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.IsRenderable;
        }
        private object get_19_SceneNode_IsAttached(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.IsAttached;
        }
        private object get_20_SceneNode_RenderHost(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.RenderHost;
        }
        private object get_21_SceneNode_Items(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.Items;
        }
        private object get_22_SceneNode_IsHitTestVisible(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.IsHitTestVisible;
        }
        private void set_22_SceneNode_IsHitTestVisible(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            that.IsHitTestVisible = (global::System.Boolean)Value;
        }
        private object get_23_SceneNode_RenderType(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.RenderType;
        }
        private void set_23_SceneNode_RenderType(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            that.RenderType = (global::HelixToolkit.UWP.RenderType)Value;
        }
        private object get_24_SceneNode_EffectTechnique(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.EffectTechnique;
        }
        private object get_25_SceneNode_RenderCore(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.RenderCore;
        }
        private object get_26_SceneNode_WrapperSource(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.WrapperSource;
        }
        private object get_27_SceneNode_OriginalBounds(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.OriginalBounds;
        }
        private object get_28_SceneNode_OriginalBoundsSphere(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.OriginalBoundsSphere;
        }
        private object get_29_SceneNode_Bounds(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.Bounds;
        }
        private object get_30_SceneNode_BoundsWithTransform(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.BoundsWithTransform;
        }
        private object get_31_SceneNode_BoundsSphere(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.BoundsSphere;
        }
        private object get_32_SceneNode_BoundsSphereWithTransform(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.BoundsSphereWithTransform;
        }
        private object get_33_SceneNode_HasBound(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.HasBound;
        }
        private object get_34_SceneNode_PostEffectNames(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.PostEffectNames;
        }
        private object get_35_SceneNode_HasAnyPostEffect(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Scene.SceneNode)instance;
            return that.HasAnyPostEffect;
        }
        private object get_36_DisposeObject_Count(object instance)
        {
            var that = (global::HelixToolkit.UWP.DisposeObject)instance;
            return that.Count;
        }
        private object get_37_DisposeObject_IsDisposed(object instance)
        {
            var that = (global::HelixToolkit.UWP.DisposeObject)instance;
            return that.IsDisposed;
        }
        private object get_38_DisposeObject_DisablePropertyChangedEvent(object instance)
        {
            var that = (global::HelixToolkit.UWP.DisposeObject)instance;
            return that.DisablePropertyChangedEvent;
        }
        private void set_38_DisposeObject_DisablePropertyChangedEvent(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DisposeObject)instance;
            that.DisablePropertyChangedEvent = (global::System.Boolean)Value;
        }
        private object get_39_ModelContainer3DX_PerFrameOpaqueNodes(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameOpaqueNodes;
        }
        private object get_40_ModelContainer3DX_PerFrameTransparentNodes(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameTransparentNodes;
        }
        private object get_41_ModelContainer3DX_PerFrameParticleNodes(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.PerFrameParticleNodes;
        }
        private object get_42_ModelContainer3DX_Renderables(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Renderables;
        }
        private object get_43_ModelContainer3DX_Device(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Device;
        }
        private object get_44_ModelContainer3DX_Device2D(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Device2D;
        }
        private object get_45_ModelContainer3DX_ClearColor(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.ClearColor;
        }
        private void set_45_ModelContainer3DX_ClearColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.ClearColor = (global::SharpDX.Color4)Value;
        }
        private object get_46_ModelContainer3DX_IsShadowMapEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.IsShadowMapEnabled;
        }
        private void set_46_ModelContainer3DX_IsShadowMapEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.IsShadowMapEnabled = (global::System.Boolean)Value;
        }
        private object get_47_ModelContainer3DX_MSAA(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.MSAA;
        }
        private void set_47_ModelContainer3DX_MSAA(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.MSAA = (global::HelixToolkit.UWP.MSAALevel)Value;
        }
        private object get_48_ModelContainer3DX_FeatureLevel(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.FeatureLevel;
        }
        private object get_49_ModelContainer3DX_Viewport(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.Viewport;
        }
        private void set_49_ModelContainer3DX_Viewport(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.Viewport = (global::HelixToolkit.UWP.IViewport3DX)Value;
        }
        private object get_50_ModelContainer3DX_RenderContext(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderContext;
        }
        private object get_51_ModelContainer3DX_IsBusy(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.IsBusy;
        }
        private object get_52_ModelContainer3DX_EnableRenderFrustum(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.EnableRenderFrustum;
        }
        private void set_52_ModelContainer3DX_EnableRenderFrustum(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.EnableRenderFrustum = (global::System.Boolean)Value;
        }
        private object get_53_ModelContainer3DX_MaxFPS(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.MaxFPS;
        }
        private void set_53_ModelContainer3DX_MaxFPS(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.MaxFPS = (global::System.UInt32)Value;
        }
        private object get_54_ModelContainer3DX_IsDeferredLighting(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.IsDeferredLighting;
        }
        private object get_55_ModelContainer3DX_SharedModelContainer(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.SharedModelContainer;
        }
        private void set_55_ModelContainer3DX_SharedModelContainer(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.SharedModelContainer = (global::HelixToolkit.UWP.IModelContainer)Value;
        }
        private object get_56_ModelContainer3DX_EnableSharingModelMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.EnableSharingModelMode;
        }
        private void set_56_ModelContainer3DX_EnableSharingModelMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.EnableSharingModelMode = (global::System.Boolean)Value;
        }
        private object get_57_ModelContainer3DX_RenderTargetBufferView(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderTargetBufferView;
        }
        private object get_58_ModelContainer3DX_DepthStencilBufferView(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.DepthStencilBufferView;
        }
        private object get_59_ModelContainer3DX_D2DTarget(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.D2DTarget;
        }
        private object get_60_ModelContainer3DX_RenderStatistics(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderStatistics;
        }
        private object get_61_ModelContainer3DX_ShowRenderDetail(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.ShowRenderDetail;
        }
        private void set_61_ModelContainer3DX_ShowRenderDetail(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.ShowRenderDetail = (global::HelixToolkit.UWP.RenderDetail)Value;
        }
        private object get_62_ModelContainer3DX_RenderConfiguration(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderConfiguration;
        }
        private void set_62_ModelContainer3DX_RenderConfiguration(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            that.RenderConfiguration = (global::HelixToolkit.UWP.DX11RenderHostConfiguration)Value;
        }
        private object get_63_ModelContainer3DX_RenderBuffer(object instance)
        {
            var that = (global::HelixToolkit.UWP.ModelContainer3DX)instance;
            return that.RenderBuffer;
        }
        private object get_64_Viewport3DX_Items(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.Items;
        }
        private object get_65_Element3D_IsRendering(object instance)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            return that.IsRendering;
        }
        private void set_65_Element3D_IsRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            that.IsRendering = (global::System.Boolean)Value;
        }
        private object get_66_Element3D_Transform3D(object instance)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            return that.Transform3D;
        }
        private void set_66_Element3D_Transform3D(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            that.Transform3D = (global::SharpDX.Matrix)Value;
        }
        private object get_67_Element3D_RenderOrder(object instance)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            return that.RenderOrder;
        }
        private void set_67_Element3D_RenderOrder(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Element3D)instance;
            that.RenderOrder = (global::System.Int32)Value;
        }
        private object get_68_Element3DCore_GUID(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.GUID;
        }
        private object get_69_Element3DCore_TotalModelMatrix(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.TotalModelMatrix;
        }
        private object get_70_Element3DCore_Visible(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.Visible;
        }
        private object get_71_Element3DCore_IsAttached(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.IsAttached;
        }
        private object get_72_Element3DCore_SceneNode(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.SceneNode;
        }
        private object get_73_Element3DCore_Bounds(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.Bounds;
        }
        private object get_74_Element3DCore_BoundsWithTransform(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.BoundsWithTransform;
        }
        private object get_75_Element3DCore_BoundsSphere(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.BoundsSphere;
        }
        private object get_76_Element3DCore_BoundsSphereWithTransform(object instance)
        {
            var that = (global::HelixToolkit.UWP.Model.Element3DCore)instance;
            return that.BoundsSphereWithTransform;
        }
        private object get_77_Viewport3DX_BackgroundColor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.BackgroundColor;
        }
        private void set_77_Viewport3DX_BackgroundColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.BackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_78_Viewport3DX_Camera(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.Camera;
        }
        private void set_78_Viewport3DX_Camera(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.Camera = (global::HelixToolkit.UWP.Camera)Value;
        }
        private object get_79_Viewport3DX_EnableAutoOctreeUpdate(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableAutoOctreeUpdate;
        }
        private void set_79_Viewport3DX_EnableAutoOctreeUpdate(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableAutoOctreeUpdate = (global::System.Boolean)Value;
        }
        private object get_80_Viewport3DX_EnableDeferredRendering(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableDeferredRendering;
        }
        private void set_80_Viewport3DX_EnableDeferredRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableDeferredRendering = (global::System.Boolean)Value;
        }
        private object get_81_Viewport3DX_EnableDesignModeRendering(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableDesignModeRendering;
        }
        private void set_81_Viewport3DX_EnableDesignModeRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableDesignModeRendering = (global::System.Boolean)Value;
        }
        private object get_82_Viewport3DX_EnableSharedModelMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableSharedModelMode;
        }
        private void set_82_Viewport3DX_EnableSharedModelMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableSharedModelMode = (global::System.Boolean)Value;
        }
        private object get_83_Viewport3DX_FXAALevel(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.FXAALevel;
        }
        private void set_83_Viewport3DX_FXAALevel(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.FXAALevel = (global::HelixToolkit.UWP.FXAALevel)Value;
        }
        private object get_84_Viewport3DX_IsShadowMappingEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsShadowMappingEnabled;
        }
        private void set_84_Viewport3DX_IsShadowMappingEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsShadowMappingEnabled = (global::System.Boolean)Value;
        }
        private object get_85_Viewport3DX_ModelUpDirection(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ModelUpDirection;
        }
        private void set_85_Viewport3DX_ModelUpDirection(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ModelUpDirection = (global::SharpDX.Vector3)Value;
        }
        private object get_86_Viewport3DX_SharedModelContainer(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.SharedModelContainer;
        }
        private void set_86_Viewport3DX_SharedModelContainer(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.SharedModelContainer = (global::HelixToolkit.UWP.IModelContainer)Value;
        }
        private object get_87_Viewport3DX_ShowCoordinateSystem(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowCoordinateSystem;
        }
        private void set_87_Viewport3DX_ShowCoordinateSystem(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowCoordinateSystem = (global::System.Boolean)Value;
        }
        private object get_88_Viewport3DX_ShowFrameDetails(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowFrameDetails;
        }
        private void set_88_Viewport3DX_ShowFrameDetails(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowFrameDetails = (global::System.Boolean)Value;
        }
        private object get_89_Viewport3DX_ShowFrameRate(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowFrameRate;
        }
        private void set_89_Viewport3DX_ShowFrameRate(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowFrameRate = (global::System.Boolean)Value;
        }
        private object get_90_Viewport3DX_RenderHost(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RenderHost;
        }
        private object get_91_Viewport3DX_CameraCore(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CameraCore;
        }
        private object get_92_Viewport3DX_Renderables(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.Renderables;
        }
        private object get_93_Viewport3DX_D2DRenderables(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.D2DRenderables;
        }
        private object get_94_Viewport3DX_RenderContext(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RenderContext;
        }
        private object get_95_Viewport3DX_RenderTechnique(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RenderTechnique;
        }
        private void set_95_Viewport3DX_RenderTechnique(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RenderTechnique = (global::HelixToolkit.UWP.IRenderTechnique)Value;
        }
        private object get_96_Viewport3DX_EffectsManager(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EffectsManager;
        }
        private void set_96_Viewport3DX_EffectsManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EffectsManager = (global::HelixToolkit.UWP.IEffectsManager)Value;
        }
        private object get_97_Viewport3DX_DefaultCamera(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.DefaultCamera;
        }
        private void set_97_Viewport3DX_DefaultCamera(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.DefaultCamera = (global::HelixToolkit.UWP.ProjectionCamera)Value;
        }
        private object get_98_Viewport3DX_MessageText(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.MessageText;
        }
        private void set_98_Viewport3DX_MessageText(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.MessageText = (global::System.String)Value;
        }
        private object get_99_Viewport3DX_CoordinateSystemHorizontalPosition(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemHorizontalPosition;
        }
        private void set_99_Viewport3DX_CoordinateSystemHorizontalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemHorizontalPosition = (global::System.Double)Value;
        }
        private object get_100_Viewport3DX_CoordinateSystemLabelForeground(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemLabelForeground;
        }
        private void set_100_Viewport3DX_CoordinateSystemLabelForeground(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemLabelForeground = (global::Windows.UI.Color)Value;
        }
        private object get_101_Viewport3DX_CoordinateSystemLabelX(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemLabelX;
        }
        private void set_101_Viewport3DX_CoordinateSystemLabelX(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemLabelX = (global::System.String)Value;
        }
        private object get_102_Viewport3DX_CoordinateSystemLabelY(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemLabelY;
        }
        private void set_102_Viewport3DX_CoordinateSystemLabelY(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemLabelY = (global::System.String)Value;
        }
        private object get_103_Viewport3DX_CoordinateSystemLabelZ(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemLabelZ;
        }
        private void set_103_Viewport3DX_CoordinateSystemLabelZ(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemLabelZ = (global::System.String)Value;
        }
        private object get_104_Viewport3DX_CoordinateSystemVerticalPosition(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemVerticalPosition;
        }
        private void set_104_Viewport3DX_CoordinateSystemVerticalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemVerticalPosition = (global::System.Double)Value;
        }
        private object get_105_Viewport3DX_CoordinateSystemSize(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CoordinateSystemSize;
        }
        private void set_105_Viewport3DX_CoordinateSystemSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CoordinateSystemSize = (global::System.Double)Value;
        }
        private object get_106_Viewport3DX_ShowViewCube(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowViewCube;
        }
        private void set_106_Viewport3DX_ShowViewCube(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowViewCube = (global::System.Boolean)Value;
        }
        private object get_107_Viewport3DX_ViewCubeTexture(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ViewCubeTexture;
        }
        private void set_107_Viewport3DX_ViewCubeTexture(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ViewCubeTexture = (global::System.IO.Stream)Value;
        }
        private object get_108_Viewport3DX_ViewCubeHorizontalPosition(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ViewCubeHorizontalPosition;
        }
        private void set_108_Viewport3DX_ViewCubeHorizontalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ViewCubeHorizontalPosition = (global::System.Double)Value;
        }
        private object get_109_Viewport3DX_IsViewCubeEdgeClicksEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsViewCubeEdgeClicksEnabled;
        }
        private void set_109_Viewport3DX_IsViewCubeEdgeClicksEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsViewCubeEdgeClicksEnabled = (global::System.Boolean)Value;
        }
        private object get_110_Viewport3DX_ViewCubeVerticalPosition(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ViewCubeVerticalPosition;
        }
        private void set_110_Viewport3DX_ViewCubeVerticalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ViewCubeVerticalPosition = (global::System.Double)Value;
        }
        private object get_111_Viewport3DX_ViewCubeSize(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ViewCubeSize;
        }
        private void set_111_Viewport3DX_ViewCubeSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ViewCubeSize = (global::System.Double)Value;
        }
        private object get_112_Viewport3DX_CameraMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CameraMode;
        }
        private void set_112_Viewport3DX_CameraMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CameraMode = (global::HelixToolkit.UWP.CameraMode)Value;
        }
        private object get_113_Viewport3DX_CameraRotationMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CameraRotationMode;
        }
        private void set_113_Viewport3DX_CameraRotationMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CameraRotationMode = (global::HelixToolkit.UWP.CameraRotationMode)Value;
        }
        private object get_114_Viewport3DX_LeftRightRotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.LeftRightRotationSensitivity;
        }
        private void set_114_Viewport3DX_LeftRightRotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.LeftRightRotationSensitivity = (global::System.Double)Value;
        }
        private object get_115_Viewport3DX_LeftRightPanSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.LeftRightPanSensitivity;
        }
        private void set_115_Viewport3DX_LeftRightPanSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.LeftRightPanSensitivity = (global::System.Double)Value;
        }
        private object get_116_Viewport3DX_RotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RotationSensitivity;
        }
        private void set_116_Viewport3DX_RotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RotationSensitivity = (global::System.Double)Value;
        }
        private object get_117_Viewport3DX_UpDownPanSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.UpDownPanSensitivity;
        }
        private void set_117_Viewport3DX_UpDownPanSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.UpDownPanSensitivity = (global::System.Double)Value;
        }
        private object get_118_Viewport3DX_UpDownRotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.UpDownRotationSensitivity;
        }
        private void set_118_Viewport3DX_UpDownRotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.UpDownRotationSensitivity = (global::System.Double)Value;
        }
        private object get_119_Viewport3DX_ZoomSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomSensitivity;
        }
        private void set_119_Viewport3DX_ZoomSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomSensitivity = (global::System.Double)Value;
        }
        private object get_120_Viewport3DX_SpinReleaseTime(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.SpinReleaseTime;
        }
        private void set_120_Viewport3DX_SpinReleaseTime(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.SpinReleaseTime = (global::System.Int32)Value;
        }
        private object get_121_Viewport3DX_FixedRotationPoint(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.FixedRotationPoint;
        }
        private void set_121_Viewport3DX_FixedRotationPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.FixedRotationPoint = (global::SharpDX.Vector3)Value;
        }
        private object get_122_Viewport3DX_FixedRotationPointEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.FixedRotationPointEnabled;
        }
        private void set_122_Viewport3DX_FixedRotationPointEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.FixedRotationPointEnabled = (global::System.Boolean)Value;
        }
        private object get_123_Viewport3DX_IsPanEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsPanEnabled;
        }
        private void set_123_Viewport3DX_IsPanEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsPanEnabled = (global::System.Boolean)Value;
        }
        private object get_124_Viewport3DX_IsInertiaEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsInertiaEnabled;
        }
        private void set_124_Viewport3DX_IsInertiaEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsInertiaEnabled = (global::System.Boolean)Value;
        }
        private object get_125_Viewport3DX_IsRotationEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsRotationEnabled;
        }
        private void set_125_Viewport3DX_IsRotationEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsRotationEnabled = (global::System.Boolean)Value;
        }
        private object get_126_Viewport3DX_IsTouchRotateEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsTouchRotateEnabled;
        }
        private void set_126_Viewport3DX_IsTouchRotateEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsTouchRotateEnabled = (global::System.Boolean)Value;
        }
        private object get_127_Viewport3DX_IsPinchZoomEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsPinchZoomEnabled;
        }
        private void set_127_Viewport3DX_IsPinchZoomEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsPinchZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_128_Viewport3DX_IsThreeFingerPanningEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsThreeFingerPanningEnabled;
        }
        private void set_128_Viewport3DX_IsThreeFingerPanningEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsThreeFingerPanningEnabled = (global::System.Boolean)Value;
        }
        private object get_129_Viewport3DX_IsZoomEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsZoomEnabled;
        }
        private void set_129_Viewport3DX_IsZoomEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_130_Viewport3DX_PanCursor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.PanCursor;
        }
        private void set_130_Viewport3DX_PanCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.PanCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_131_Viewport3DX_RotateCursor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RotateCursor;
        }
        private void set_131_Viewport3DX_RotateCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RotateCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_132_Viewport3DX_RotateAroundMouseDownPoint(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RotateAroundMouseDownPoint;
        }
        private void set_132_Viewport3DX_RotateAroundMouseDownPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RotateAroundMouseDownPoint = (global::System.Boolean)Value;
        }
        private object get_133_Viewport3DX_ZoomAroundMouseDownPoint(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomAroundMouseDownPoint;
        }
        private void set_133_Viewport3DX_ZoomAroundMouseDownPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomAroundMouseDownPoint = (global::System.Boolean)Value;
        }
        private object get_134_Viewport3DX_IsChangeFieldOfViewEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsChangeFieldOfViewEnabled;
        }
        private void set_134_Viewport3DX_IsChangeFieldOfViewEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsChangeFieldOfViewEnabled = (global::System.Boolean)Value;
        }
        private object get_135_Viewport3DX_MaximumFieldOfView(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.MaximumFieldOfView;
        }
        private void set_135_Viewport3DX_MaximumFieldOfView(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.MaximumFieldOfView = (global::System.Double)Value;
        }
        private object get_136_Viewport3DX_MinimumFieldOfView(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.MinimumFieldOfView;
        }
        private void set_136_Viewport3DX_MinimumFieldOfView(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.MinimumFieldOfView = (global::System.Double)Value;
        }
        private object get_137_Viewport3DX_ZoomCursor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomCursor;
        }
        private void set_137_Viewport3DX_ZoomCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_138_Viewport3DX_ZoomDistanceLimitFar(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomDistanceLimitFar;
        }
        private void set_138_Viewport3DX_ZoomDistanceLimitFar(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomDistanceLimitFar = (global::System.Double)Value;
        }
        private object get_139_Viewport3DX_ZoomDistanceLimitNear(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomDistanceLimitNear;
        }
        private void set_139_Viewport3DX_ZoomDistanceLimitNear(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomDistanceLimitNear = (global::System.Double)Value;
        }
        private object get_140_Viewport3DX_ZoomRectangleCursor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ZoomRectangleCursor;
        }
        private void set_140_Viewport3DX_ZoomRectangleCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ZoomRectangleCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_141_Viewport3DX_IsMoveEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.IsMoveEnabled;
        }
        private void set_141_Viewport3DX_IsMoveEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.IsMoveEnabled = (global::System.Boolean)Value;
        }
        private object get_142_Viewport3DX_CameraInertiaFactor(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.CameraInertiaFactor;
        }
        private void set_142_Viewport3DX_CameraInertiaFactor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.CameraInertiaFactor = (global::System.Double)Value;
        }
        private object get_143_Viewport3DX_InfiniteSpin(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.InfiniteSpin;
        }
        private void set_143_Viewport3DX_InfiniteSpin(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.InfiniteSpin = (global::System.Boolean)Value;
        }
        private object get_144_Viewport3DX_InputController(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.InputController;
        }
        private void set_144_Viewport3DX_InputController(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.InputController = (global::HelixToolkit.UWP.InputController)Value;
        }
        private object get_145_Viewport3DX_PageUpDownZoomSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.PageUpDownZoomSensitivity;
        }
        private void set_145_Viewport3DX_PageUpDownZoomSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.PageUpDownZoomSensitivity = (global::System.Double)Value;
        }
        private object get_146_Viewport3DX_MoveSensitivity(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.MoveSensitivity;
        }
        private void set_146_Viewport3DX_MoveSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.MoveSensitivity = (global::System.Double)Value;
        }
        private object get_147_Viewport3DX_MSAA(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.MSAA;
        }
        private void set_147_Viewport3DX_MSAA(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.MSAA = (global::HelixToolkit.UWP.MSAALevel)Value;
        }
        private object get_148_Viewport3DX_EnableMouseButtonHitTest(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableMouseButtonHitTest;
        }
        private void set_148_Viewport3DX_EnableMouseButtonHitTest(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableMouseButtonHitTest = (global::System.Boolean)Value;
        }
        private object get_149_Viewport3DX_ManualLookAtPoint(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ManualLookAtPoint;
        }
        private void set_149_Viewport3DX_ManualLookAtPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ManualLookAtPoint = (global::SharpDX.Vector3)Value;
        }
        private object get_150_Viewport3DX_EnableRenderFrustum(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableRenderFrustum;
        }
        private void set_150_Viewport3DX_EnableRenderFrustum(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableRenderFrustum = (global::System.Boolean)Value;
        }
        private object get_151_Viewport3DX_RenderException(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RenderException;
        }
        private void set_151_Viewport3DX_RenderException(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RenderException = (global::System.Exception)Value;
        }
        private object get_152_Viewport3DX_FrameRate(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.FrameRate;
        }
        private void set_152_Viewport3DX_FrameRate(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.FrameRate = (global::System.Double)Value;
        }
        private object get_153_Viewport3DX_EnableOITRendering(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableOITRendering;
        }
        private void set_153_Viewport3DX_EnableOITRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableOITRendering = (global::System.Boolean)Value;
        }
        private object get_154_Viewport3DX_OITWeightPower(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.OITWeightPower;
        }
        private void set_154_Viewport3DX_OITWeightPower(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.OITWeightPower = (global::System.Double)Value;
        }
        private object get_155_Viewport3DX_OITWeightDepthSlope(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.OITWeightDepthSlope;
        }
        private void set_155_Viewport3DX_OITWeightDepthSlope(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.OITWeightDepthSlope = (global::System.Double)Value;
        }
        private object get_156_Viewport3DX_OITWeightMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.OITWeightMode;
        }
        private void set_156_Viewport3DX_OITWeightMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.OITWeightMode = (global::HelixToolkit.UWP.OITWeightMode)Value;
        }
        private object get_157_Viewport3DX_ShowCameraInfo(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowCameraInfo;
        }
        private void set_157_Viewport3DX_ShowCameraInfo(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowCameraInfo = (global::System.Boolean)Value;
        }
        private object get_158_Viewport3DX_ShowTriangleCountInfo(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.ShowTriangleCountInfo;
        }
        private void set_158_Viewport3DX_ShowTriangleCountInfo(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.ShowTriangleCountInfo = (global::System.Boolean)Value;
        }
        private object get_159_Viewport3DX_RenderDetailOutput(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.RenderDetailOutput;
        }
        private void set_159_Viewport3DX_RenderDetailOutput(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.RenderDetailOutput = (global::System.String)Value;
        }
        private object get_160_Viewport3DX_EnableRenderOrder(object instance)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            return that.EnableRenderOrder;
        }
        private void set_160_Viewport3DX_EnableRenderOrder(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Viewport3DX)instance;
            that.EnableRenderOrder = (global::System.Boolean)Value;
        }
        private object get_161_Joystick_XValue(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.XValue;
        }
        private object get_162_Joystick_YValue(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.YValue;
        }
        private object get_163_Joystick_OuterDiameter(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterDiameter;
        }
        private void set_163_Joystick_OuterDiameter(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterDiameter = (global::System.Double)Value;
        }
        private object get_164_Joystick_InnerDiameter(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerDiameter;
        }
        private void set_164_Joystick_InnerDiameter(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerDiameter = (global::System.Double)Value;
        }
        private object get_165_Joystick_InnerFill(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerFill;
        }
        private void set_165_Joystick_InnerFill(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerFill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_166_Joystick_InnerStroke(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerStroke;
        }
        private void set_166_Joystick_InnerStroke(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerStroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_167_Joystick_InnerStrokeThickness(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerStrokeThickness;
        }
        private void set_167_Joystick_InnerStrokeThickness(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerStrokeThickness = (global::System.Double)Value;
        }
        private object get_168_Joystick_InnerStrokeDashOffset(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerStrokeDashOffset;
        }
        private void set_168_Joystick_InnerStrokeDashOffset(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerStrokeDashOffset = (global::System.Double)Value;
        }
        private object get_169_Joystick_InnerStrokeDashArray(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerStrokeDashArray;
        }
        private void set_169_Joystick_InnerStrokeDashArray(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerStrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_170_Joystick_InnerStrokeDashCap(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.InnerStrokeDashCap;
        }
        private void set_170_Joystick_InnerStrokeDashCap(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.InnerStrokeDashCap = (global::Windows.UI.Xaml.Media.PenLineCap)Value;
        }
        private object get_171_Joystick_OuterFill(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterFill;
        }
        private void set_171_Joystick_OuterFill(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterFill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_172_Joystick_OuterStroke(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterStroke;
        }
        private void set_172_Joystick_OuterStroke(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterStroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_173_Joystick_OuterStrokeThickness(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterStrokeThickness;
        }
        private void set_173_Joystick_OuterStrokeThickness(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterStrokeThickness = (global::System.Double)Value;
        }
        private object get_174_Joystick_OuterStrokeDashArray(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterStrokeDashArray;
        }
        private void set_174_Joystick_OuterStrokeDashArray(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterStrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_175_Joystick_OuterStrokeDashOffset(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterStrokeDashOffset;
        }
        private void set_175_Joystick_OuterStrokeDashOffset(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterStrokeDashOffset = (global::System.Double)Value;
        }
        private object get_176_Joystick_OuterStrokeDashCap(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.OuterStrokeDashCap;
        }
        private void set_176_Joystick_OuterStrokeDashCap(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.OuterStrokeDashCap = (global::Windows.UI.Xaml.Media.PenLineCap)Value;
        }
        private object get_177_Joystick_Theme(object instance)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            return that.Theme;
        }
        private void set_177_Joystick_Theme(object instance, object Value)
        {
            var that = (global::JoystickUserControl.Joystick)instance;
            that.Theme = (global::JoystickUserControl.Joystick.JoystickTheme)Value;
        }
        private object get_178_ShadowMap3D_Distance(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.Distance;
        }
        private void set_178_ShadowMap3D_Distance(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.Distance = (global::System.Double)Value;
        }
        private object get_179_ShadowMap3D_OrthoWidth(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.OrthoWidth;
        }
        private void set_179_ShadowMap3D_OrthoWidth(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.OrthoWidth = (global::System.Double)Value;
        }
        private object get_180_ShadowMap3D_Resolution(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.Resolution;
        }
        private void set_180_ShadowMap3D_Resolution(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.Resolution = (global::Windows.Foundation.Size)Value;
        }
        private object get_181_ShadowMap3D_Bias(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.Bias;
        }
        private void set_181_ShadowMap3D_Bias(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.Bias = (global::System.Double)Value;
        }
        private object get_182_ShadowMap3D_Intensity(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.Intensity;
        }
        private void set_182_ShadowMap3D_Intensity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.Intensity = (global::System.Double)Value;
        }
        private object get_183_ShadowMap3D_NearFieldDistance(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.NearFieldDistance;
        }
        private void set_183_ShadowMap3D_NearFieldDistance(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.NearFieldDistance = (global::System.Double)Value;
        }
        private object get_184_ShadowMap3D_FarFieldDistance(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.FarFieldDistance;
        }
        private void set_184_ShadowMap3D_FarFieldDistance(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.FarFieldDistance = (global::System.Double)Value;
        }
        private object get_185_ShadowMap3D_LightCamera(object instance)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            return that.LightCamera;
        }
        private void set_185_ShadowMap3D_LightCamera(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ShadowMap3D)instance;
            that.LightCamera = (global::HelixToolkit.UWP.IProjectionCameraModel)Value;
        }
        private object get_186_DirectionalLight3D_Direction(object instance)
        {
            var that = (global::HelixToolkit.UWP.DirectionalLight3D)instance;
            return that.Direction;
        }
        private void set_186_DirectionalLight3D_Direction(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DirectionalLight3D)instance;
            that.Direction = (global::SharpDX.Vector3)Value;
        }
        private object get_187_Light3D_Color(object instance)
        {
            var that = (global::HelixToolkit.UWP.Light3D)instance;
            return that.Color;
        }
        private void set_187_Light3D_Color(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.Light3D)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_188_Light3D_LightType(object instance)
        {
            var that = (global::HelixToolkit.UWP.Light3D)instance;
            return that.LightType;
        }
        private object get_189_EnvironmentMap3D_Texture(object instance)
        {
            var that = (global::HelixToolkit.UWP.EnvironmentMap3D)instance;
            return that.Texture;
        }
        private void set_189_EnvironmentMap3D_Texture(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.EnvironmentMap3D)instance;
            that.Texture = (global::System.IO.Stream)Value;
        }
        private object get_190_GroupElement3D_Children(object instance)
        {
            var that = (global::HelixToolkit.UWP.GroupElement3D)instance;
            return that.Children;
        }
        private object get_191_GroupElement3D_OctreeManager(object instance)
        {
            var that = (global::HelixToolkit.UWP.GroupElement3D)instance;
            return that.OctreeManager;
        }
        private void set_191_GroupElement3D_OctreeManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GroupElement3D)instance;
            that.OctreeManager = (global::HelixToolkit.UWP.IOctreeManagerWrapper)Value;
        }
        private object get_192_GroupElement3D_ItemsSource(object instance)
        {
            var that = (global::HelixToolkit.UWP.GroupElement3D)instance;
            return that.ItemsSource;
        }
        private void set_192_GroupElement3D_ItemsSource(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GroupElement3D)instance;
            that.ItemsSource = (global::System.Collections.Generic.IList<global::HelixToolkit.UWP.Element3D>)Value;
        }
        private object get_193_GeometryModel3D_DepthBias(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.DepthBias;
        }
        private void set_193_GeometryModel3D_DepthBias(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.DepthBias = (global::System.Int32)Value;
        }
        private object get_194_GeometryModel3D_Geometry(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.Geometry;
        }
        private void set_194_GeometryModel3D_Geometry(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.Geometry = (global::HelixToolkit.UWP.Geometry3D)Value;
        }
        private object get_195_MaterialGeometryModel3D_IsTransparent(object instance)
        {
            var that = (global::HelixToolkit.UWP.MaterialGeometryModel3D)instance;
            return that.IsTransparent;
        }
        private void set_195_MaterialGeometryModel3D_IsTransparent(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MaterialGeometryModel3D)instance;
            that.IsTransparent = (global::System.Boolean)Value;
        }
        private object get_196_MaterialGeometryModel3D_Material(object instance)
        {
            var that = (global::HelixToolkit.UWP.MaterialGeometryModel3D)instance;
            return that.Material;
        }
        private void set_196_MaterialGeometryModel3D_Material(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MaterialGeometryModel3D)instance;
            that.Material = (global::HelixToolkit.UWP.Material)Value;
        }
        private object get_197_MeshGeometryModel3D_RenderWireframe(object instance)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            return that.RenderWireframe;
        }
        private void set_197_MeshGeometryModel3D_RenderWireframe(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            that.RenderWireframe = (global::System.Boolean)Value;
        }
        private object get_198_MeshGeometryModel3D_CullMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            return that.CullMode;
        }
        private void set_198_MeshGeometryModel3D_CullMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            that.CullMode = (global::SharpDX.Direct3D11.CullMode)Value;
        }
        private object get_199_GeometryModel3D_IsThrowingShadow(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.IsThrowingShadow;
        }
        private void set_199_GeometryModel3D_IsThrowingShadow(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.IsThrowingShadow = (global::System.Boolean)Value;
        }
        private object get_200_MeshGeometryModel3D_WireframeColor(object instance)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            return that.WireframeColor;
        }
        private void set_200_MeshGeometryModel3D_WireframeColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            that.WireframeColor = (global::Windows.UI.Color)Value;
        }
        private object get_201_MeshGeometryModel3D_FrontCounterClockwise(object instance)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            return that.FrontCounterClockwise;
        }
        private void set_201_MeshGeometryModel3D_FrontCounterClockwise(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            that.FrontCounterClockwise = (global::System.Boolean)Value;
        }
        private object get_202_MeshGeometryModel3D_InvertNormal(object instance)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            return that.InvertNormal;
        }
        private void set_202_MeshGeometryModel3D_InvertNormal(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.MeshGeometryModel3D)instance;
            that.InvertNormal = (global::System.Boolean)Value;
        }
        private object get_203_GeometryModel3D_PostEffects(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.PostEffects;
        }
        private void set_203_GeometryModel3D_PostEffects(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.PostEffects = (global::System.String)Value;
        }
        private object get_204_GeometryModel3D_Instances(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.Instances;
        }
        private void set_204_GeometryModel3D_Instances(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.Instances = (global::System.Collections.Generic.IList<global::SharpDX.Matrix>)Value;
        }
        private object get_205_Matrix_Up(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Up;
        }
        private void set_205_Matrix_Up(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Up = (global::SharpDX.Vector3)Value;
        }
        private object get_206_Matrix_Down(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Down;
        }
        private void set_206_Matrix_Down(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Down = (global::SharpDX.Vector3)Value;
        }
        private object get_207_Matrix_Right(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Right;
        }
        private void set_207_Matrix_Right(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Right = (global::SharpDX.Vector3)Value;
        }
        private object get_208_Matrix_Left(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Left;
        }
        private void set_208_Matrix_Left(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Left = (global::SharpDX.Vector3)Value;
        }
        private object get_209_Matrix_Forward(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Forward;
        }
        private void set_209_Matrix_Forward(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Forward = (global::SharpDX.Vector3)Value;
        }
        private object get_210_Matrix_Backward(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Backward;
        }
        private void set_210_Matrix_Backward(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Backward = (global::SharpDX.Vector3)Value;
        }
        private object get_211_Matrix_Row1(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Row1;
        }
        private void set_211_Matrix_Row1(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Row1 = (global::SharpDX.Vector4)Value;
        }
        private object get_212_Matrix_Row2(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Row2;
        }
        private void set_212_Matrix_Row2(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Row2 = (global::SharpDX.Vector4)Value;
        }
        private object get_213_Matrix_Row3(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Row3;
        }
        private void set_213_Matrix_Row3(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Row3 = (global::SharpDX.Vector4)Value;
        }
        private object get_214_Matrix_Row4(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Row4;
        }
        private void set_214_Matrix_Row4(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Row4 = (global::SharpDX.Vector4)Value;
        }
        private object get_215_Matrix_Column1(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Column1;
        }
        private void set_215_Matrix_Column1(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Column1 = (global::SharpDX.Vector4)Value;
        }
        private object get_216_Matrix_Column2(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Column2;
        }
        private void set_216_Matrix_Column2(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Column2 = (global::SharpDX.Vector4)Value;
        }
        private object get_217_Matrix_Column3(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Column3;
        }
        private void set_217_Matrix_Column3(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Column3 = (global::SharpDX.Vector4)Value;
        }
        private object get_218_Matrix_Column4(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.Column4;
        }
        private void set_218_Matrix_Column4(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.Column4 = (global::SharpDX.Vector4)Value;
        }
        private object get_219_Matrix_TranslationVector(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.TranslationVector;
        }
        private void set_219_Matrix_TranslationVector(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.TranslationVector = (global::SharpDX.Vector3)Value;
        }
        private object get_220_Matrix_ScaleVector(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.ScaleVector;
        }
        private void set_220_Matrix_ScaleVector(object instance, object Value)
        {
            var that = (global::SharpDX.Matrix)instance;
            that.ScaleVector = (global::SharpDX.Vector3)Value;
        }
        private object get_221_Matrix_IsIdentity(object instance)
        {
            var that = (global::SharpDX.Matrix)instance;
            return that.IsIdentity;
        }
        private object get_222_GeometryModel3D_SlopeScaledDepthBias(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.SlopeScaledDepthBias;
        }
        private void set_222_GeometryModel3D_SlopeScaledDepthBias(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.SlopeScaledDepthBias = (global::System.Double)Value;
        }
        private object get_223_GeometryModel3D_IsSelected(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.IsSelected;
        }
        private void set_223_GeometryModel3D_IsSelected(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_224_GeometryModel3D_IsMultisampleEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.IsMultisampleEnabled;
        }
        private void set_224_GeometryModel3D_IsMultisampleEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.IsMultisampleEnabled = (global::System.Boolean)Value;
        }
        private object get_225_GeometryModel3D_FillMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.FillMode;
        }
        private void set_225_GeometryModel3D_FillMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.FillMode = (global::SharpDX.Direct3D11.FillMode)Value;
        }
        private object get_226_GeometryModel3D_IsScissorEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.IsScissorEnabled;
        }
        private void set_226_GeometryModel3D_IsScissorEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.IsScissorEnabled = (global::System.Boolean)Value;
        }
        private object get_227_GeometryModel3D_IsDepthClipEnabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.IsDepthClipEnabled;
        }
        private void set_227_GeometryModel3D_IsDepthClipEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.IsDepthClipEnabled = (global::System.Boolean)Value;
        }
        private object get_228_GeometryModel3D_EnableViewFrustumCheck(object instance)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            return that.EnableViewFrustumCheck;
        }
        private void set_228_GeometryModel3D_EnableViewFrustumCheck(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.GeometryModel3D)instance;
            that.EnableViewFrustumCheck = (global::System.Boolean)Value;
        }
        private object get_229_ParticleStormModel3D_Acceleration(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.Acceleration;
        }
        private void set_229_ParticleStormModel3D_Acceleration(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.Acceleration = (global::SharpDX.Vector3)Value;
        }
        private object get_230_ParticleStormModel3D_AnimateSpriteByEnergy(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.AnimateSpriteByEnergy;
        }
        private void set_230_ParticleStormModel3D_AnimateSpriteByEnergy(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.AnimateSpriteByEnergy = (global::System.Boolean)Value;
        }
        private object get_231_ParticleStormModel3D_BlendColor(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.BlendColor;
        }
        private void set_231_ParticleStormModel3D_BlendColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.BlendColor = (global::Windows.UI.Color)Value;
        }
        private object get_232_ParticleStormModel3D_ConsumerLocation(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ConsumerLocation;
        }
        private void set_232_ParticleStormModel3D_ConsumerLocation(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ConsumerLocation = (global::SharpDX.Vector3)Value;
        }
        private object get_233_ParticleStormModel3D_ConsumerRadius(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ConsumerRadius;
        }
        private void set_233_ParticleStormModel3D_ConsumerRadius(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ConsumerRadius = (global::System.Double)Value;
        }
        private object get_234_ParticleStormModel3D_DestAlphaBlend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.DestAlphaBlend;
        }
        private void set_234_ParticleStormModel3D_DestAlphaBlend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.DestAlphaBlend = (global::SharpDX.Direct3D11.BlendOption)Value;
        }
        private object get_235_ParticleStormModel3D_DestBlend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.DestBlend;
        }
        private void set_235_ParticleStormModel3D_DestBlend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.DestBlend = (global::SharpDX.Direct3D11.BlendOption)Value;
        }
        private object get_236_ParticleStormModel3D_EmitterLocation(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.EmitterLocation;
        }
        private void set_236_ParticleStormModel3D_EmitterLocation(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.EmitterLocation = (global::SharpDX.Vector3)Value;
        }
        private object get_237_ParticleStormModel3D_EmitterRadius(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.EmitterRadius;
        }
        private void set_237_ParticleStormModel3D_EmitterRadius(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.EmitterRadius = (global::System.Double)Value;
        }
        private object get_238_ParticleStormModel3D_EnergyDissipationRate(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.EnergyDissipationRate;
        }
        private void set_238_ParticleStormModel3D_EnergyDissipationRate(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.EnergyDissipationRate = (global::System.Double)Value;
        }
        private object get_239_ParticleStormModel3D_InitialEnergy(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.InitialEnergy;
        }
        private void set_239_ParticleStormModel3D_InitialEnergy(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.InitialEnergy = (global::System.Double)Value;
        }
        private object get_240_ParticleStormModel3D_Instances(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.Instances;
        }
        private void set_240_ParticleStormModel3D_Instances(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.Instances = (global::System.Collections.Generic.IList<global::SharpDX.Matrix>)Value;
        }
        private object get_241_ParticleStormModel3D_NumTextureColumn(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.NumTextureColumn;
        }
        private void set_241_ParticleStormModel3D_NumTextureColumn(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.NumTextureColumn = (global::System.Int32)Value;
        }
        private object get_242_ParticleStormModel3D_NumTextureRow(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.NumTextureRow;
        }
        private void set_242_ParticleStormModel3D_NumTextureRow(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.NumTextureRow = (global::System.Int32)Value;
        }
        private object get_243_ParticleStormModel3D_ParticleBounds(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ParticleBounds;
        }
        private void set_243_ParticleStormModel3D_ParticleBounds(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ParticleBounds = (global::SharpDX.BoundingBox)Value;
        }
        private object get_244_ParticleStormModel3D_ParticleCount(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ParticleCount;
        }
        private void set_244_ParticleStormModel3D_ParticleCount(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ParticleCount = (global::System.Int32)Value;
        }
        private object get_245_ParticleStormModel3D_ParticleSize(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ParticleSize;
        }
        private void set_245_ParticleStormModel3D_ParticleSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ParticleSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_246_ParticleStormModel3D_ParticleTexture(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ParticleTexture;
        }
        private void set_246_ParticleStormModel3D_ParticleTexture(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ParticleTexture = (global::System.IO.Stream)Value;
        }
        private object get_247_ParticleStormModel3D_SourceAlphaBlend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.SourceAlphaBlend;
        }
        private void set_247_ParticleStormModel3D_SourceAlphaBlend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.SourceAlphaBlend = (global::SharpDX.Direct3D11.BlendOption)Value;
        }
        private object get_248_ParticleStormModel3D_SourceBlend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.SourceBlend;
        }
        private void set_248_ParticleStormModel3D_SourceBlend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.SourceBlend = (global::SharpDX.Direct3D11.BlendOption)Value;
        }
        private object get_249_ParticleStormModel3D_Turbulance(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.Turbulance;
        }
        private void set_249_ParticleStormModel3D_Turbulance(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.Turbulance = (global::System.Double)Value;
        }
        private object get_250_ParticleStormModel3D_ConsumerGravity(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.ConsumerGravity;
        }
        private void set_250_ParticleStormModel3D_ConsumerGravity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.ConsumerGravity = (global::System.Double)Value;
        }
        private object get_251_ParticleStormModel3D_RandomVectorGenerator(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.RandomVectorGenerator;
        }
        private void set_251_ParticleStormModel3D_RandomVectorGenerator(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.RandomVectorGenerator = (global::HelixToolkit.UWP.Utilities.IRandomVector)Value;
        }
        private object get_252_ParticleStormModel3D_InitialVelocity(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.InitialVelocity;
        }
        private void set_252_ParticleStormModel3D_InitialVelocity(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.InitialVelocity = (global::System.Double)Value;
        }
        private object get_253_ParticleStormModel3D_CumulateAtBound(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.CumulateAtBound;
        }
        private void set_253_ParticleStormModel3D_CumulateAtBound(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.CumulateAtBound = (global::System.Boolean)Value;
        }
        private object get_254_ParticleStormModel3D_Blend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.Blend;
        }
        private void set_254_ParticleStormModel3D_Blend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.Blend = (global::SharpDX.Direct3D11.BlendOperation)Value;
        }
        private object get_255_ParticleStormModel3D_AlphaBlend(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.AlphaBlend;
        }
        private void set_255_ParticleStormModel3D_AlphaBlend(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.AlphaBlend = (global::SharpDX.Direct3D11.BlendOperation)Value;
        }
        private object get_256_ParticleStormModel3D_BlendFactor(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.BlendFactor;
        }
        private void set_256_ParticleStormModel3D_BlendFactor(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.BlendFactor = (global::Windows.UI.Color)Value;
        }
        private object get_257_ParticleStormModel3D_SampleMask(object instance)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            return that.SampleMask;
        }
        private void set_257_ParticleStormModel3D_SampleMask(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ParticleStormModel3D)instance;
            that.SampleMask = (global::System.Int32)Value;
        }
        private object get_258_LineGeometryModel3D_Color(object instance)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            return that.Color;
        }
        private void set_258_LineGeometryModel3D_Color(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_259_LineGeometryModel3D_Thickness(object instance)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            return that.Thickness;
        }
        private void set_259_LineGeometryModel3D_Thickness(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            that.Thickness = (global::System.Double)Value;
        }
        private object get_260_LineGeometryModel3D_Smoothness(object instance)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            return that.Smoothness;
        }
        private void set_260_LineGeometryModel3D_Smoothness(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            that.Smoothness = (global::System.Double)Value;
        }
        private object get_261_LineGeometryModel3D_HitTestThickness(object instance)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            return that.HitTestThickness;
        }
        private void set_261_LineGeometryModel3D_HitTestThickness(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.LineGeometryModel3D)instance;
            that.HitTestThickness = (global::System.Double)Value;
        }
        private object get_262_PostEffectMeshOutlineBlur_EffectName(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            return that.EffectName;
        }
        private void set_262_PostEffectMeshOutlineBlur_EffectName(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            that.EffectName = (global::System.String)Value;
        }
        private object get_263_PostEffectMeshOutlineBlur_NumberOfBlurPass(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            return that.NumberOfBlurPass;
        }
        private void set_263_PostEffectMeshOutlineBlur_NumberOfBlurPass(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            that.NumberOfBlurPass = (global::System.Int32)Value;
        }
        private object get_264_PostEffectMeshBorderHighlight_DrawMode(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshBorderHighlight)instance;
            return that.DrawMode;
        }
        private void set_264_PostEffectMeshBorderHighlight_DrawMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshBorderHighlight)instance;
            that.DrawMode = (global::HelixToolkit.UWP.OutlineMode)Value;
        }
        private object get_265_PostEffectMeshOutlineBlur_Color(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            return that.Color;
        }
        private void set_265_PostEffectMeshOutlineBlur_Color(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_266_PostEffectMeshOutlineBlur_ScaleX(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            return that.ScaleX;
        }
        private void set_266_PostEffectMeshOutlineBlur_ScaleX(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            that.ScaleX = (global::System.Double)Value;
        }
        private object get_267_PostEffectMeshOutlineBlur_ScaleY(object instance)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            return that.ScaleY;
        }
        private void set_267_PostEffectMeshOutlineBlur_ScaleY(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PostEffectMeshOutlineBlur)instance;
            that.ScaleY = (global::System.Double)Value;
        }
        private object get_268_PointGeometryModel3D_Color(object instance)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            return that.Color;
        }
        private void set_268_PointGeometryModel3D_Color(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_269_PointGeometryModel3D_Size(object instance)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            return that.Size;
        }
        private void set_269_PointGeometryModel3D_Size(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            that.Size = (global::Windows.Foundation.Size)Value;
        }
        private object get_270_PointGeometryModel3D_Figure(object instance)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            return that.Figure;
        }
        private void set_270_PointGeometryModel3D_Figure(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            that.Figure = (global::HelixToolkit.UWP.PointFigure)Value;
        }
        private object get_271_PointGeometryModel3D_FigureRatio(object instance)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            return that.FigureRatio;
        }
        private void set_271_PointGeometryModel3D_FigureRatio(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            that.FigureRatio = (global::System.Double)Value;
        }
        private object get_272_PointGeometryModel3D_HitTestThickness(object instance)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            return that.HitTestThickness;
        }
        private void set_272_PointGeometryModel3D_HitTestThickness(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.PointGeometryModel3D)instance;
            that.HitTestThickness = (global::System.Double)Value;
        }
        private object get_273_OctreeManagerBaseWrapper_Octree(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.Octree;
        }
        private void set_273_OctreeManagerBaseWrapper_Octree(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.Octree = (global::HelixToolkit.UWP.IOctreeBasic)Value;
        }
        private object get_274_OctreeManagerBaseWrapper_EnableOctreeOutput(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.EnableOctreeOutput;
        }
        private void set_274_OctreeManagerBaseWrapper_EnableOctreeOutput(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.EnableOctreeOutput = (global::System.Boolean)Value;
        }
        private object get_275_OctreeManagerBaseWrapper_MinSize(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.MinSize;
        }
        private void set_275_OctreeManagerBaseWrapper_MinSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.MinSize = (global::System.Single)Value;
        }
        private object get_276_OctreeManagerBaseWrapper_AutoDeleteIfEmpty(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.AutoDeleteIfEmpty;
        }
        private void set_276_OctreeManagerBaseWrapper_AutoDeleteIfEmpty(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.AutoDeleteIfEmpty = (global::System.Boolean)Value;
        }
        private object get_277_OctreeManagerBaseWrapper_Cubify(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.Cubify;
        }
        private void set_277_OctreeManagerBaseWrapper_Cubify(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.Cubify = (global::System.Boolean)Value;
        }
        private object get_278_OctreeManagerBaseWrapper_RecordHitPathBoundingBoxes(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.RecordHitPathBoundingBoxes;
        }
        private void set_278_OctreeManagerBaseWrapper_RecordHitPathBoundingBoxes(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.RecordHitPathBoundingBoxes = (global::System.Boolean)Value;
        }
        private object get_279_OctreeManagerBaseWrapper_MinObjectSizeToSplit(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.MinObjectSizeToSplit;
        }
        private void set_279_OctreeManagerBaseWrapper_MinObjectSizeToSplit(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.MinObjectSizeToSplit = (global::System.Int32)Value;
        }
        private object get_280_OctreeManagerBaseWrapper_Manager(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.Manager;
        }
        private object get_281_OctreeManagerBaseWrapper_Enabled(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.Enabled;
        }
        private void set_281_OctreeManagerBaseWrapper_Enabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.Enabled = (global::System.Boolean)Value;
        }
        private object get_282_OctreeManagerBaseWrapper_Parameter(object instance)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            return that.Parameter;
        }
        private void set_282_OctreeManagerBaseWrapper_Parameter(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.OctreeManagerBaseWrapper)instance;
            that.Parameter = (global::HelixToolkit.UWP.OctreeBuildParameter)Value;
        }
        private object get_283_DynamicReflectionMap3D_EnableReflector(object instance)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            return that.EnableReflector;
        }
        private void set_283_DynamicReflectionMap3D_EnableReflector(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            that.EnableReflector = (global::System.Boolean)Value;
        }
        private object get_284_DynamicReflectionMap3D_Size(object instance)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            return that.Size;
        }
        private void set_284_DynamicReflectionMap3D_Size(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            that.Size = (global::System.Int32)Value;
        }
        private object get_285_DynamicReflectionMap3D_FarField(object instance)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            return that.FarField;
        }
        private void set_285_DynamicReflectionMap3D_FarField(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            that.FarField = (global::System.Double)Value;
        }
        private object get_286_DynamicReflectionMap3D_NearField(object instance)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            return that.NearField;
        }
        private void set_286_DynamicReflectionMap3D_NearField(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            that.NearField = (global::System.Double)Value;
        }
        private object get_287_DynamicReflectionMap3D_IsLeftHanded(object instance)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            return that.IsLeftHanded;
        }
        private void set_287_DynamicReflectionMap3D_IsLeftHanded(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.DynamicReflectionMap3D)instance;
            that.IsLeftHanded = (global::System.Boolean)Value;
        }
        private object get_288_BillboardTextModel3D_IsTransparent(object instance)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            return that.IsTransparent;
        }
        private void set_288_BillboardTextModel3D_IsTransparent(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            that.IsTransparent = (global::System.Boolean)Value;
        }
        private object get_289_BillboardTextModel3D_FixedSize(object instance)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            return that.FixedSize;
        }
        private void set_289_BillboardTextModel3D_FixedSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            that.FixedSize = (global::System.Boolean)Value;
        }
        private object get_290_BillboardTextModel3D_SamplerDescription(object instance)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            return that.SamplerDescription;
        }
        private void set_290_BillboardTextModel3D_SamplerDescription(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.BillboardTextModel3D)instance;
            that.SamplerDescription = (global::SharpDX.Direct3D11.SamplerStateDescription)Value;
        }
        private object get_291_ItemsModel3D_ItemsSource(object instance)
        {
            var that = (global::HelixToolkit.UWP.ItemsModel3D)instance;
            return that.ItemsSource;
        }
        private void set_291_ItemsModel3D_ItemsSource(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ItemsModel3D)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_292_ItemsModel3D_OctreeManager(object instance)
        {
            var that = (global::HelixToolkit.UWP.ItemsModel3D)instance;
            return that.OctreeManager;
        }
        private void set_292_ItemsModel3D_OctreeManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.UWP.ItemsModel3D)instance;
            that.OctreeManager = (global::HelixToolkit.UWP.IOctreeManagerWrapper)Value;
        }
        private object get_293_ItemsModel3D_Children(object instance)
        {
            var that = (global::HelixToolkit.UWP.ItemsModel3D)instance;
            return that.Children;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "HelixToolkit.UWP.ModelContainer3DX.EffectsManager":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EffectsManager", "HelixToolkit.UWP.IEffectsManager");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_ModelContainer3DX_EffectsManager;
                xamlMember.Setter = set_0_ModelContainer3DX_EffectsManager;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderTechnique":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderTechnique", "HelixToolkit.UWP.IRenderTechnique");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ModelContainer3DX_RenderTechnique;
                xamlMember.Setter = set_1_ModelContainer3DX_RenderTechnique;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Logger":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Logger", "HelixToolkit.Logger.LogWrapper");
                xamlMember.Getter = get_2_ModelContainer3DX_Logger;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.GUID":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "GUID", "Guid");
                xamlMember.Getter = get_3_ModelContainer3DX_GUID;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.IsRendering":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsRendering", "Boolean");
                xamlMember.Getter = get_4_ModelContainer3DX_IsRendering;
                xamlMember.Setter = set_4_ModelContainer3DX_IsRendering;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.CurrentRenderHost":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CurrentRenderHost", "HelixToolkit.UWP.IRenderHost");
                xamlMember.Getter = get_5_ModelContainer3DX_CurrentRenderHost;
                xamlMember.Setter = set_5_ModelContainer3DX_CurrentRenderHost;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Renderer":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Renderer", "HelixToolkit.UWP.Render.IRenderer");
                xamlMember.Getter = get_6_ModelContainer3DX_Renderer;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameFlattenedScene":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameFlattenedScene", "System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>>");
                xamlMember.Getter = get_7_ModelContainer3DX_PerFrameFlattenedScene;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>.Key":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Key", "Int32");
                xamlMember.Getter = get_8_KeyValuePair_Key;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>.Value":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.KeyValuePair`2<Int32, HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Value", "HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember.Getter = get_9_KeyValuePair_Value;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameLights":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameLights", "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.LightNode>");
                xamlMember.Getter = get_10_ModelContainer3DX_PerFrameLights;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameNodesWithPostEffect":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameNodesWithPostEffect", "System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_11_ModelContainer3DX_PerFrameNodesWithPostEffect;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.GUID":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "GUID", "Guid");
                xamlMember.Getter = get_12_SceneNode_GUID;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.RenderOrderKey":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderOrderKey", "HelixToolkit.UWP.Model.OrderKey");
                xamlMember.Getter = get_13_SceneNode_RenderOrderKey;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.RenderOrder":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderOrder", "UInt16");
                xamlMember.Getter = get_14_SceneNode_RenderOrder;
                xamlMember.Setter = set_14_SceneNode_RenderOrder;
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.ModelMatrix":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ModelMatrix", "SharpDX.Matrix");
                xamlMember.Getter = get_15_SceneNode_ModelMatrix;
                xamlMember.Setter = set_15_SceneNode_ModelMatrix;
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.Parent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Parent", "HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember.Getter = get_16_SceneNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.Visible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_17_SceneNode_Visible;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.IsRenderable":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsRenderable", "Boolean");
                xamlMember.Getter = get_18_SceneNode_IsRenderable;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.IsAttached":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsAttached", "Boolean");
                xamlMember.Getter = get_19_SceneNode_IsAttached;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.RenderHost":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderHost", "HelixToolkit.UWP.IRenderHost");
                xamlMember.Getter = get_20_SceneNode_RenderHost;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.Items":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_21_SceneNode_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.IsHitTestVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsHitTestVisible", "Boolean");
                xamlMember.Getter = get_22_SceneNode_IsHitTestVisible;
                xamlMember.Setter = set_22_SceneNode_IsHitTestVisible;
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.RenderType":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderType", "HelixToolkit.UWP.RenderType");
                xamlMember.Getter = get_23_SceneNode_RenderType;
                xamlMember.Setter = set_23_SceneNode_RenderType;
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.EffectTechnique":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EffectTechnique", "HelixToolkit.UWP.IRenderTechnique");
                xamlMember.Getter = get_24_SceneNode_EffectTechnique;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.RenderCore":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderCore", "HelixToolkit.UWP.Core.RenderCore");
                xamlMember.Getter = get_25_SceneNode_RenderCore;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.WrapperSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WrapperSource", "Object");
                xamlMember.Getter = get_26_SceneNode_WrapperSource;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.OriginalBounds":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OriginalBounds", "SharpDX.BoundingBox");
                xamlMember.Getter = get_27_SceneNode_OriginalBounds;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.OriginalBoundsSphere":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OriginalBoundsSphere", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_28_SceneNode_OriginalBoundsSphere;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.Bounds":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Bounds", "SharpDX.BoundingBox");
                xamlMember.Getter = get_29_SceneNode_Bounds;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.BoundsWithTransform":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsWithTransform", "SharpDX.BoundingBox");
                xamlMember.Getter = get_30_SceneNode_BoundsWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.BoundsSphere":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsSphere", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_31_SceneNode_BoundsSphere;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.BoundsSphereWithTransform":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsSphereWithTransform", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_32_SceneNode_BoundsSphereWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.HasBound":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HasBound", "Boolean");
                xamlMember.Getter = get_33_SceneNode_HasBound;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.PostEffectNames":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PostEffectNames", "System.Collections.Generic.IEnumerable`1<String>");
                xamlMember.Getter = get_34_SceneNode_PostEffectNames;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Scene.SceneNode.HasAnyPostEffect":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HasAnyPostEffect", "Boolean");
                xamlMember.Getter = get_35_SceneNode_HasAnyPostEffect;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.DisposeObject.Count":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DisposeObject");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_36_DisposeObject_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.DisposeObject.IsDisposed":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DisposeObject");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsDisposed", "Boolean");
                xamlMember.Getter = get_37_DisposeObject_IsDisposed;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.DisposeObject.DisablePropertyChangedEvent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DisposeObject");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DisablePropertyChangedEvent", "Boolean");
                xamlMember.Getter = get_38_DisposeObject_DisablePropertyChangedEvent;
                xamlMember.Setter = set_38_DisposeObject_DisablePropertyChangedEvent;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameOpaqueNodes":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameOpaqueNodes", "System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_39_ModelContainer3DX_PerFrameOpaqueNodes;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameTransparentNodes":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameTransparentNodes", "System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_40_ModelContainer3DX_PerFrameTransparentNodes;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.PerFrameParticleNodes":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerFrameParticleNodes", "System.Collections.Generic.List`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_41_ModelContainer3DX_PerFrameParticleNodes;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Renderables":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Renderables", "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_42_ModelContainer3DX_Renderables;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Device":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Device", "SharpDX.Direct3D11.Device1");
                xamlMember.Getter = get_43_ModelContainer3DX_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Device2D":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Device2D", "SharpDX.Direct2D1.Device");
                xamlMember.Getter = get_44_ModelContainer3DX_Device2D;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.ClearColor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ClearColor", "SharpDX.Color4");
                xamlMember.Getter = get_45_ModelContainer3DX_ClearColor;
                xamlMember.Setter = set_45_ModelContainer3DX_ClearColor;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.IsShadowMapEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsShadowMapEnabled", "Boolean");
                xamlMember.Getter = get_46_ModelContainer3DX_IsShadowMapEnabled;
                xamlMember.Setter = set_46_ModelContainer3DX_IsShadowMapEnabled;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.MSAA":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MSAA", "HelixToolkit.UWP.MSAALevel");
                xamlMember.Getter = get_47_ModelContainer3DX_MSAA;
                xamlMember.Setter = set_47_ModelContainer3DX_MSAA;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.FeatureLevel":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FeatureLevel", "SharpDX.Direct3D.FeatureLevel");
                xamlMember.Getter = get_48_ModelContainer3DX_FeatureLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.Viewport":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Viewport", "HelixToolkit.UWP.IViewport3DX");
                xamlMember.Getter = get_49_ModelContainer3DX_Viewport;
                xamlMember.Setter = set_49_ModelContainer3DX_Viewport;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderContext":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderContext", "HelixToolkit.UWP.RenderContext");
                xamlMember.Getter = get_50_ModelContainer3DX_RenderContext;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.IsBusy":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.Getter = get_51_ModelContainer3DX_IsBusy;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.EnableRenderFrustum":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableRenderFrustum", "Boolean");
                xamlMember.Getter = get_52_ModelContainer3DX_EnableRenderFrustum;
                xamlMember.Setter = set_52_ModelContainer3DX_EnableRenderFrustum;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.MaxFPS":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MaxFPS", "UInt32");
                xamlMember.Getter = get_53_ModelContainer3DX_MaxFPS;
                xamlMember.Setter = set_53_ModelContainer3DX_MaxFPS;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.IsDeferredLighting":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsDeferredLighting", "Boolean");
                xamlMember.Getter = get_54_ModelContainer3DX_IsDeferredLighting;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.SharedModelContainer":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SharedModelContainer", "HelixToolkit.UWP.IModelContainer");
                xamlMember.Getter = get_55_ModelContainer3DX_SharedModelContainer;
                xamlMember.Setter = set_55_ModelContainer3DX_SharedModelContainer;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.EnableSharingModelMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableSharingModelMode", "Boolean");
                xamlMember.Getter = get_56_ModelContainer3DX_EnableSharingModelMode;
                xamlMember.Setter = set_56_ModelContainer3DX_EnableSharingModelMode;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderTargetBufferView":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderTargetBufferView", "SharpDX.Direct3D11.RenderTargetView");
                xamlMember.Getter = get_57_ModelContainer3DX_RenderTargetBufferView;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.DepthStencilBufferView":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DepthStencilBufferView", "SharpDX.Direct3D11.DepthStencilView");
                xamlMember.Getter = get_58_ModelContainer3DX_DepthStencilBufferView;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.D2DTarget":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "D2DTarget", "HelixToolkit.UWP.Core2D.D2DTargetProxy");
                xamlMember.Getter = get_59_ModelContainer3DX_D2DTarget;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderStatistics":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderStatistics", "HelixToolkit.UWP.Utilities.IRenderStatistics");
                xamlMember.Getter = get_60_ModelContainer3DX_RenderStatistics;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.ShowRenderDetail":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowRenderDetail", "HelixToolkit.UWP.RenderDetail");
                xamlMember.Getter = get_61_ModelContainer3DX_ShowRenderDetail;
                xamlMember.Setter = set_61_ModelContainer3DX_ShowRenderDetail;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderConfiguration":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderConfiguration", "HelixToolkit.UWP.DX11RenderHostConfiguration");
                xamlMember.Getter = get_62_ModelContainer3DX_RenderConfiguration;
                xamlMember.Setter = set_62_ModelContainer3DX_RenderConfiguration;
                break;
            case "HelixToolkit.UWP.ModelContainer3DX.RenderBuffer":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ModelContainer3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderBuffer", "HelixToolkit.UWP.Render.DX11RenderBufferProxyBase");
                xamlMember.Getter = get_63_ModelContainer3DX_RenderBuffer;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.Items":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Items", "HelixToolkit.UWP.ObservableElement3DCollection");
                xamlMember.Getter = get_64_Viewport3DX_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Element3D.IsRendering":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Element3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_Element3D_IsRendering;
                xamlMember.Setter = set_65_Element3D_IsRendering;
                break;
            case "HelixToolkit.UWP.Element3D.Transform3D":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Element3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Transform3D", "SharpDX.Matrix");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_Element3D_Transform3D;
                xamlMember.Setter = set_66_Element3D_Transform3D;
                break;
            case "HelixToolkit.UWP.Element3D.RenderOrder":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Element3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderOrder", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_Element3D_RenderOrder;
                xamlMember.Setter = set_67_Element3D_RenderOrder;
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.GUID":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "GUID", "Guid");
                xamlMember.Getter = get_68_Element3DCore_GUID;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.TotalModelMatrix":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TotalModelMatrix", "SharpDX.Matrix");
                xamlMember.Getter = get_69_Element3DCore_TotalModelMatrix;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.Visible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_70_Element3DCore_Visible;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.IsAttached":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsAttached", "Boolean");
                xamlMember.Getter = get_71_Element3DCore_IsAttached;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.SceneNode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SceneNode", "HelixToolkit.UWP.Model.Scene.SceneNode");
                xamlMember.Getter = get_72_Element3DCore_SceneNode;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.Bounds":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Bounds", "SharpDX.BoundingBox");
                xamlMember.Getter = get_73_Element3DCore_Bounds;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.BoundsWithTransform":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsWithTransform", "SharpDX.BoundingBox");
                xamlMember.Getter = get_74_Element3DCore_BoundsWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.BoundsSphere":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsSphere", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_75_Element3DCore_BoundsSphere;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Model.Element3DCore.BoundsSphereWithTransform":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Model.Element3DCore");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BoundsSphereWithTransform", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_76_Element3DCore_BoundsSphereWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.BackgroundColor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_Viewport3DX_BackgroundColor;
                xamlMember.Setter = set_77_Viewport3DX_BackgroundColor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.Camera":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Camera", "HelixToolkit.UWP.Camera");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_Viewport3DX_Camera;
                xamlMember.Setter = set_78_Viewport3DX_Camera;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableAutoOctreeUpdate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableAutoOctreeUpdate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_Viewport3DX_EnableAutoOctreeUpdate;
                xamlMember.Setter = set_79_Viewport3DX_EnableAutoOctreeUpdate;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableDeferredRendering":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableDeferredRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_Viewport3DX_EnableDeferredRendering;
                xamlMember.Setter = set_80_Viewport3DX_EnableDeferredRendering;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableDesignModeRendering":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableDesignModeRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_Viewport3DX_EnableDesignModeRendering;
                xamlMember.Setter = set_81_Viewport3DX_EnableDesignModeRendering;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableSharedModelMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableSharedModelMode", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_Viewport3DX_EnableSharedModelMode;
                xamlMember.Setter = set_82_Viewport3DX_EnableSharedModelMode;
                break;
            case "HelixToolkit.UWP.Viewport3DX.FXAALevel":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FXAALevel", "HelixToolkit.UWP.FXAALevel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_Viewport3DX_FXAALevel;
                xamlMember.Setter = set_83_Viewport3DX_FXAALevel;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsShadowMappingEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsShadowMappingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Viewport3DX_IsShadowMappingEnabled;
                xamlMember.Setter = set_84_Viewport3DX_IsShadowMappingEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ModelUpDirection":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ModelUpDirection", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Viewport3DX_ModelUpDirection;
                xamlMember.Setter = set_85_Viewport3DX_ModelUpDirection;
                break;
            case "HelixToolkit.UWP.Viewport3DX.SharedModelContainer":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SharedModelContainer", "HelixToolkit.UWP.IModelContainer");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Viewport3DX_SharedModelContainer;
                xamlMember.Setter = set_86_Viewport3DX_SharedModelContainer;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowCoordinateSystem":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowCoordinateSystem", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_Viewport3DX_ShowCoordinateSystem;
                xamlMember.Setter = set_87_Viewport3DX_ShowCoordinateSystem;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowFrameDetails":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowFrameDetails", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_Viewport3DX_ShowFrameDetails;
                xamlMember.Setter = set_88_Viewport3DX_ShowFrameDetails;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowFrameRate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowFrameRate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_Viewport3DX_ShowFrameRate;
                xamlMember.Setter = set_89_Viewport3DX_ShowFrameRate;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RenderHost":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderHost", "HelixToolkit.UWP.IRenderHost");
                xamlMember.Getter = get_90_Viewport3DX_RenderHost;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.CameraCore":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CameraCore", "HelixToolkit.UWP.Cameras.CameraCore");
                xamlMember.Getter = get_91_Viewport3DX_CameraCore;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.Renderables":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Renderables", "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene.SceneNode>");
                xamlMember.Getter = get_92_Viewport3DX_Renderables;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.D2DRenderables":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "D2DRenderables", "System.Collections.Generic.IEnumerable`1<HelixToolkit.UWP.Model.Scene2D.SceneNode2D>");
                xamlMember.Getter = get_93_Viewport3DX_D2DRenderables;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.RenderContext":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderContext", "HelixToolkit.UWP.RenderContext");
                xamlMember.Getter = get_94_Viewport3DX_RenderContext;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.Viewport3DX.RenderTechnique":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderTechnique", "HelixToolkit.UWP.IRenderTechnique");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_Viewport3DX_RenderTechnique;
                xamlMember.Setter = set_95_Viewport3DX_RenderTechnique;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EffectsManager":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EffectsManager", "HelixToolkit.UWP.IEffectsManager");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_Viewport3DX_EffectsManager;
                xamlMember.Setter = set_96_Viewport3DX_EffectsManager;
                break;
            case "HelixToolkit.UWP.Viewport3DX.DefaultCamera":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DefaultCamera", "HelixToolkit.UWP.ProjectionCamera");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_Viewport3DX_DefaultCamera;
                xamlMember.Setter = set_97_Viewport3DX_DefaultCamera;
                break;
            case "HelixToolkit.UWP.Viewport3DX.MessageText":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MessageText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_Viewport3DX_MessageText;
                xamlMember.Setter = set_98_Viewport3DX_MessageText;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemHorizontalPosition":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemHorizontalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Viewport3DX_CoordinateSystemHorizontalPosition;
                xamlMember.Setter = set_99_Viewport3DX_CoordinateSystemHorizontalPosition;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemLabelForeground":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelForeground", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_Viewport3DX_CoordinateSystemLabelForeground;
                xamlMember.Setter = set_100_Viewport3DX_CoordinateSystemLabelForeground;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemLabelX":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelX", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_Viewport3DX_CoordinateSystemLabelX;
                xamlMember.Setter = set_101_Viewport3DX_CoordinateSystemLabelX;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemLabelY":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelY", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_Viewport3DX_CoordinateSystemLabelY;
                xamlMember.Setter = set_102_Viewport3DX_CoordinateSystemLabelY;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemLabelZ":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelZ", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_Viewport3DX_CoordinateSystemLabelZ;
                xamlMember.Setter = set_103_Viewport3DX_CoordinateSystemLabelZ;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemVerticalPosition":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemVerticalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_Viewport3DX_CoordinateSystemVerticalPosition;
                xamlMember.Setter = set_104_Viewport3DX_CoordinateSystemVerticalPosition;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CoordinateSystemSize":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CoordinateSystemSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_Viewport3DX_CoordinateSystemSize;
                xamlMember.Setter = set_105_Viewport3DX_CoordinateSystemSize;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowViewCube":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowViewCube", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_Viewport3DX_ShowViewCube;
                xamlMember.Setter = set_106_Viewport3DX_ShowViewCube;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ViewCubeTexture":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ViewCubeTexture", "System.IO.Stream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_Viewport3DX_ViewCubeTexture;
                xamlMember.Setter = set_107_Viewport3DX_ViewCubeTexture;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ViewCubeHorizontalPosition":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ViewCubeHorizontalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_Viewport3DX_ViewCubeHorizontalPosition;
                xamlMember.Setter = set_108_Viewport3DX_ViewCubeHorizontalPosition;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsViewCubeEdgeClicksEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsViewCubeEdgeClicksEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_Viewport3DX_IsViewCubeEdgeClicksEnabled;
                xamlMember.Setter = set_109_Viewport3DX_IsViewCubeEdgeClicksEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ViewCubeVerticalPosition":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ViewCubeVerticalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_Viewport3DX_ViewCubeVerticalPosition;
                xamlMember.Setter = set_110_Viewport3DX_ViewCubeVerticalPosition;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ViewCubeSize":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ViewCubeSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_Viewport3DX_ViewCubeSize;
                xamlMember.Setter = set_111_Viewport3DX_ViewCubeSize;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CameraMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CameraMode", "HelixToolkit.UWP.CameraMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_Viewport3DX_CameraMode;
                xamlMember.Setter = set_112_Viewport3DX_CameraMode;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CameraRotationMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CameraRotationMode", "HelixToolkit.UWP.CameraRotationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_Viewport3DX_CameraRotationMode;
                xamlMember.Setter = set_113_Viewport3DX_CameraRotationMode;
                break;
            case "HelixToolkit.UWP.Viewport3DX.LeftRightRotationSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "LeftRightRotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_Viewport3DX_LeftRightRotationSensitivity;
                xamlMember.Setter = set_114_Viewport3DX_LeftRightRotationSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.LeftRightPanSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "LeftRightPanSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_Viewport3DX_LeftRightPanSensitivity;
                xamlMember.Setter = set_115_Viewport3DX_LeftRightPanSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RotationSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_Viewport3DX_RotationSensitivity;
                xamlMember.Setter = set_116_Viewport3DX_RotationSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.UpDownPanSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "UpDownPanSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_Viewport3DX_UpDownPanSensitivity;
                xamlMember.Setter = set_117_Viewport3DX_UpDownPanSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.UpDownRotationSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "UpDownRotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_Viewport3DX_UpDownRotationSensitivity;
                xamlMember.Setter = set_118_Viewport3DX_UpDownRotationSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_Viewport3DX_ZoomSensitivity;
                xamlMember.Setter = set_119_Viewport3DX_ZoomSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.SpinReleaseTime":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SpinReleaseTime", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_Viewport3DX_SpinReleaseTime;
                xamlMember.Setter = set_120_Viewport3DX_SpinReleaseTime;
                break;
            case "HelixToolkit.UWP.Viewport3DX.FixedRotationPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FixedRotationPoint", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_Viewport3DX_FixedRotationPoint;
                xamlMember.Setter = set_121_Viewport3DX_FixedRotationPoint;
                break;
            case "HelixToolkit.UWP.Viewport3DX.FixedRotationPointEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FixedRotationPointEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_Viewport3DX_FixedRotationPointEnabled;
                xamlMember.Setter = set_122_Viewport3DX_FixedRotationPointEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsPanEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsPanEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_Viewport3DX_IsPanEnabled;
                xamlMember.Setter = set_123_Viewport3DX_IsPanEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsInertiaEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsInertiaEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_Viewport3DX_IsInertiaEnabled;
                xamlMember.Setter = set_124_Viewport3DX_IsInertiaEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsRotationEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsRotationEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_Viewport3DX_IsRotationEnabled;
                xamlMember.Setter = set_125_Viewport3DX_IsRotationEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsTouchRotateEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsTouchRotateEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_Viewport3DX_IsTouchRotateEnabled;
                xamlMember.Setter = set_126_Viewport3DX_IsTouchRotateEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsPinchZoomEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsPinchZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_Viewport3DX_IsPinchZoomEnabled;
                xamlMember.Setter = set_127_Viewport3DX_IsPinchZoomEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsThreeFingerPanningEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsThreeFingerPanningEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_Viewport3DX_IsThreeFingerPanningEnabled;
                xamlMember.Setter = set_128_Viewport3DX_IsThreeFingerPanningEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsZoomEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_Viewport3DX_IsZoomEnabled;
                xamlMember.Setter = set_129_Viewport3DX_IsZoomEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.PanCursor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PanCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_Viewport3DX_PanCursor;
                xamlMember.Setter = set_130_Viewport3DX_PanCursor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RotateCursor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotateCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_Viewport3DX_RotateCursor;
                xamlMember.Setter = set_131_Viewport3DX_RotateCursor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RotateAroundMouseDownPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotateAroundMouseDownPoint", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_Viewport3DX_RotateAroundMouseDownPoint;
                xamlMember.Setter = set_132_Viewport3DX_RotateAroundMouseDownPoint;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomAroundMouseDownPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomAroundMouseDownPoint", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_Viewport3DX_ZoomAroundMouseDownPoint;
                xamlMember.Setter = set_133_Viewport3DX_ZoomAroundMouseDownPoint;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsChangeFieldOfViewEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsChangeFieldOfViewEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_Viewport3DX_IsChangeFieldOfViewEnabled;
                xamlMember.Setter = set_134_Viewport3DX_IsChangeFieldOfViewEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.MaximumFieldOfView":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MaximumFieldOfView", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_Viewport3DX_MaximumFieldOfView;
                xamlMember.Setter = set_135_Viewport3DX_MaximumFieldOfView;
                break;
            case "HelixToolkit.UWP.Viewport3DX.MinimumFieldOfView":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinimumFieldOfView", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_Viewport3DX_MinimumFieldOfView;
                xamlMember.Setter = set_136_Viewport3DX_MinimumFieldOfView;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomCursor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_Viewport3DX_ZoomCursor;
                xamlMember.Setter = set_137_Viewport3DX_ZoomCursor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomDistanceLimitFar":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomDistanceLimitFar", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_Viewport3DX_ZoomDistanceLimitFar;
                xamlMember.Setter = set_138_Viewport3DX_ZoomDistanceLimitFar;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomDistanceLimitNear":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomDistanceLimitNear", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_Viewport3DX_ZoomDistanceLimitNear;
                xamlMember.Setter = set_139_Viewport3DX_ZoomDistanceLimitNear;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ZoomRectangleCursor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomRectangleCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_Viewport3DX_ZoomRectangleCursor;
                xamlMember.Setter = set_140_Viewport3DX_ZoomRectangleCursor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.IsMoveEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsMoveEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_Viewport3DX_IsMoveEnabled;
                xamlMember.Setter = set_141_Viewport3DX_IsMoveEnabled;
                break;
            case "HelixToolkit.UWP.Viewport3DX.CameraInertiaFactor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CameraInertiaFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_Viewport3DX_CameraInertiaFactor;
                xamlMember.Setter = set_142_Viewport3DX_CameraInertiaFactor;
                break;
            case "HelixToolkit.UWP.Viewport3DX.InfiniteSpin":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InfiniteSpin", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_Viewport3DX_InfiniteSpin;
                xamlMember.Setter = set_143_Viewport3DX_InfiniteSpin;
                break;
            case "HelixToolkit.UWP.Viewport3DX.InputController":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InputController", "HelixToolkit.UWP.InputController");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_Viewport3DX_InputController;
                xamlMember.Setter = set_144_Viewport3DX_InputController;
                break;
            case "HelixToolkit.UWP.Viewport3DX.PageUpDownZoomSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PageUpDownZoomSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_Viewport3DX_PageUpDownZoomSensitivity;
                xamlMember.Setter = set_145_Viewport3DX_PageUpDownZoomSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.MoveSensitivity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MoveSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_Viewport3DX_MoveSensitivity;
                xamlMember.Setter = set_146_Viewport3DX_MoveSensitivity;
                break;
            case "HelixToolkit.UWP.Viewport3DX.MSAA":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MSAA", "HelixToolkit.UWP.MSAALevel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_Viewport3DX_MSAA;
                xamlMember.Setter = set_147_Viewport3DX_MSAA;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableMouseButtonHitTest":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableMouseButtonHitTest", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_Viewport3DX_EnableMouseButtonHitTest;
                xamlMember.Setter = set_148_Viewport3DX_EnableMouseButtonHitTest;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ManualLookAtPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ManualLookAtPoint", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_Viewport3DX_ManualLookAtPoint;
                xamlMember.Setter = set_149_Viewport3DX_ManualLookAtPoint;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableRenderFrustum":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableRenderFrustum", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_Viewport3DX_EnableRenderFrustum;
                xamlMember.Setter = set_150_Viewport3DX_EnableRenderFrustum;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RenderException":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderException", "System.Exception");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_Viewport3DX_RenderException;
                xamlMember.Setter = set_151_Viewport3DX_RenderException;
                break;
            case "HelixToolkit.UWP.Viewport3DX.FrameRate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FrameRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_Viewport3DX_FrameRate;
                xamlMember.Setter = set_152_Viewport3DX_FrameRate;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableOITRendering":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableOITRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_Viewport3DX_EnableOITRendering;
                xamlMember.Setter = set_153_Viewport3DX_EnableOITRendering;
                break;
            case "HelixToolkit.UWP.Viewport3DX.OITWeightPower":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OITWeightPower", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_Viewport3DX_OITWeightPower;
                xamlMember.Setter = set_154_Viewport3DX_OITWeightPower;
                break;
            case "HelixToolkit.UWP.Viewport3DX.OITWeightDepthSlope":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OITWeightDepthSlope", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_Viewport3DX_OITWeightDepthSlope;
                xamlMember.Setter = set_155_Viewport3DX_OITWeightDepthSlope;
                break;
            case "HelixToolkit.UWP.Viewport3DX.OITWeightMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OITWeightMode", "HelixToolkit.UWP.OITWeightMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_Viewport3DX_OITWeightMode;
                xamlMember.Setter = set_156_Viewport3DX_OITWeightMode;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowCameraInfo":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowCameraInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_Viewport3DX_ShowCameraInfo;
                xamlMember.Setter = set_157_Viewport3DX_ShowCameraInfo;
                break;
            case "HelixToolkit.UWP.Viewport3DX.ShowTriangleCountInfo":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowTriangleCountInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_Viewport3DX_ShowTriangleCountInfo;
                xamlMember.Setter = set_158_Viewport3DX_ShowTriangleCountInfo;
                break;
            case "HelixToolkit.UWP.Viewport3DX.RenderDetailOutput":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderDetailOutput", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_Viewport3DX_RenderDetailOutput;
                xamlMember.Setter = set_159_Viewport3DX_RenderDetailOutput;
                break;
            case "HelixToolkit.UWP.Viewport3DX.EnableRenderOrder":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Viewport3DX");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableRenderOrder", "Boolean");
                xamlMember.Getter = get_160_Viewport3DX_EnableRenderOrder;
                xamlMember.Setter = set_160_Viewport3DX_EnableRenderOrder;
                break;
            case "JoystickUserControl.Joystick.XValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "XValue", "Double");
                xamlMember.Getter = get_161_Joystick_XValue;
                xamlMember.SetIsReadOnly();
                break;
            case "JoystickUserControl.Joystick.YValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "YValue", "Double");
                xamlMember.Getter = get_162_Joystick_YValue;
                xamlMember.SetIsReadOnly();
                break;
            case "JoystickUserControl.Joystick.OuterDiameter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterDiameter", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_Joystick_OuterDiameter;
                xamlMember.Setter = set_163_Joystick_OuterDiameter;
                break;
            case "JoystickUserControl.Joystick.InnerDiameter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerDiameter", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_Joystick_InnerDiameter;
                xamlMember.Setter = set_164_Joystick_InnerDiameter;
                break;
            case "JoystickUserControl.Joystick.InnerFill":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerFill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_Joystick_InnerFill;
                xamlMember.Setter = set_165_Joystick_InnerFill;
                break;
            case "JoystickUserControl.Joystick.InnerStroke":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerStroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_Joystick_InnerStroke;
                xamlMember.Setter = set_166_Joystick_InnerStroke;
                break;
            case "JoystickUserControl.Joystick.InnerStrokeThickness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerStrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_Joystick_InnerStrokeThickness;
                xamlMember.Setter = set_167_Joystick_InnerStrokeThickness;
                break;
            case "JoystickUserControl.Joystick.InnerStrokeDashOffset":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerStrokeDashOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_Joystick_InnerStrokeDashOffset;
                xamlMember.Setter = set_168_Joystick_InnerStrokeDashOffset;
                break;
            case "JoystickUserControl.Joystick.InnerStrokeDashArray":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerStrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_Joystick_InnerStrokeDashArray;
                xamlMember.Setter = set_169_Joystick_InnerStrokeDashArray;
                break;
            case "JoystickUserControl.Joystick.InnerStrokeDashCap":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InnerStrokeDashCap", "Windows.UI.Xaml.Media.PenLineCap");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_Joystick_InnerStrokeDashCap;
                xamlMember.Setter = set_170_Joystick_InnerStrokeDashCap;
                break;
            case "JoystickUserControl.Joystick.OuterFill":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterFill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_Joystick_OuterFill;
                xamlMember.Setter = set_171_Joystick_OuterFill;
                break;
            case "JoystickUserControl.Joystick.OuterStroke":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterStroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_Joystick_OuterStroke;
                xamlMember.Setter = set_172_Joystick_OuterStroke;
                break;
            case "JoystickUserControl.Joystick.OuterStrokeThickness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterStrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_Joystick_OuterStrokeThickness;
                xamlMember.Setter = set_173_Joystick_OuterStrokeThickness;
                break;
            case "JoystickUserControl.Joystick.OuterStrokeDashArray":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterStrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_Joystick_OuterStrokeDashArray;
                xamlMember.Setter = set_174_Joystick_OuterStrokeDashArray;
                break;
            case "JoystickUserControl.Joystick.OuterStrokeDashOffset":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterStrokeDashOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_Joystick_OuterStrokeDashOffset;
                xamlMember.Setter = set_175_Joystick_OuterStrokeDashOffset;
                break;
            case "JoystickUserControl.Joystick.OuterStrokeDashCap":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OuterStrokeDashCap", "Windows.UI.Xaml.Media.PenLineCap");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_Joystick_OuterStrokeDashCap;
                xamlMember.Setter = set_176_Joystick_OuterStrokeDashCap;
                break;
            case "JoystickUserControl.Joystick.Theme":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JoystickUserControl.Joystick");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Theme", "JoystickUserControl.Joystick.JoystickTheme");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_Joystick_Theme;
                xamlMember.Setter = set_177_Joystick_Theme;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.Distance":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Distance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_ShadowMap3D_Distance;
                xamlMember.Setter = set_178_ShadowMap3D_Distance;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.OrthoWidth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OrthoWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_ShadowMap3D_OrthoWidth;
                xamlMember.Setter = set_179_ShadowMap3D_OrthoWidth;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.Resolution":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Resolution", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_ShadowMap3D_Resolution;
                xamlMember.Setter = set_180_ShadowMap3D_Resolution;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.Bias":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Bias", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_ShadowMap3D_Bias;
                xamlMember.Setter = set_181_ShadowMap3D_Bias;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.Intensity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Intensity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_ShadowMap3D_Intensity;
                xamlMember.Setter = set_182_ShadowMap3D_Intensity;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.NearFieldDistance":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NearFieldDistance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_ShadowMap3D_NearFieldDistance;
                xamlMember.Setter = set_183_ShadowMap3D_NearFieldDistance;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.FarFieldDistance":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FarFieldDistance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_ShadowMap3D_FarFieldDistance;
                xamlMember.Setter = set_184_ShadowMap3D_FarFieldDistance;
                break;
            case "HelixToolkit.UWP.ShadowMap3D.LightCamera":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ShadowMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "LightCamera", "HelixToolkit.UWP.IProjectionCameraModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_ShadowMap3D_LightCamera;
                xamlMember.Setter = set_185_ShadowMap3D_LightCamera;
                break;
            case "HelixToolkit.UWP.DirectionalLight3D.Direction":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DirectionalLight3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Direction", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_DirectionalLight3D_Direction;
                xamlMember.Setter = set_186_DirectionalLight3D_Direction;
                break;
            case "HelixToolkit.UWP.Light3D.Color":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Light3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_Light3D_Color;
                xamlMember.Setter = set_187_Light3D_Color;
                break;
            case "HelixToolkit.UWP.Light3D.LightType":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.Light3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "LightType", "HelixToolkit.UWP.LightType");
                xamlMember.Getter = get_188_Light3D_LightType;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.EnvironmentMap3D.Texture":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.EnvironmentMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Texture", "System.IO.Stream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_EnvironmentMap3D_Texture;
                xamlMember.Setter = set_189_EnvironmentMap3D_Texture;
                break;
            case "HelixToolkit.UWP.GroupElement3D.Children":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GroupElement3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Children", "HelixToolkit.UWP.ObservableElement3DCollection");
                xamlMember.Getter = get_190_GroupElement3D_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.GroupElement3D.OctreeManager":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GroupElement3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OctreeManager", "HelixToolkit.UWP.IOctreeManagerWrapper");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_GroupElement3D_OctreeManager;
                xamlMember.Setter = set_191_GroupElement3D_OctreeManager;
                break;
            case "HelixToolkit.UWP.GroupElement3D.ItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GroupElement3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.Generic.IList`1<HelixToolkit.UWP.Element3D>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_GroupElement3D_ItemsSource;
                xamlMember.Setter = set_192_GroupElement3D_ItemsSource;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.DepthBias":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DepthBias", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_GeometryModel3D_DepthBias;
                xamlMember.Setter = set_193_GeometryModel3D_DepthBias;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.Geometry":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Geometry", "HelixToolkit.UWP.Geometry3D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_GeometryModel3D_Geometry;
                xamlMember.Setter = set_194_GeometryModel3D_Geometry;
                break;
            case "HelixToolkit.UWP.MaterialGeometryModel3D.IsTransparent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MaterialGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsTransparent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_MaterialGeometryModel3D_IsTransparent;
                xamlMember.Setter = set_195_MaterialGeometryModel3D_IsTransparent;
                break;
            case "HelixToolkit.UWP.MaterialGeometryModel3D.Material":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MaterialGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Material", "HelixToolkit.UWP.Material");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_MaterialGeometryModel3D_Material;
                xamlMember.Setter = set_196_MaterialGeometryModel3D_Material;
                break;
            case "HelixToolkit.UWP.MeshGeometryModel3D.RenderWireframe":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MeshGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RenderWireframe", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_MeshGeometryModel3D_RenderWireframe;
                xamlMember.Setter = set_197_MeshGeometryModel3D_RenderWireframe;
                break;
            case "HelixToolkit.UWP.MeshGeometryModel3D.CullMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MeshGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CullMode", "SharpDX.Direct3D11.CullMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_MeshGeometryModel3D_CullMode;
                xamlMember.Setter = set_198_MeshGeometryModel3D_CullMode;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.IsThrowingShadow":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsThrowingShadow", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_GeometryModel3D_IsThrowingShadow;
                xamlMember.Setter = set_199_GeometryModel3D_IsThrowingShadow;
                break;
            case "HelixToolkit.UWP.MeshGeometryModel3D.WireframeColor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MeshGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WireframeColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_MeshGeometryModel3D_WireframeColor;
                xamlMember.Setter = set_200_MeshGeometryModel3D_WireframeColor;
                break;
            case "HelixToolkit.UWP.MeshGeometryModel3D.FrontCounterClockwise":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MeshGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FrontCounterClockwise", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_MeshGeometryModel3D_FrontCounterClockwise;
                xamlMember.Setter = set_201_MeshGeometryModel3D_FrontCounterClockwise;
                break;
            case "HelixToolkit.UWP.MeshGeometryModel3D.InvertNormal":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.MeshGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InvertNormal", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_MeshGeometryModel3D_InvertNormal;
                xamlMember.Setter = set_202_MeshGeometryModel3D_InvertNormal;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.PostEffects":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PostEffects", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_GeometryModel3D_PostEffects;
                xamlMember.Setter = set_203_GeometryModel3D_PostEffects;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.Instances":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Instances", "System.Collections.Generic.IList`1<SharpDX.Matrix>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_GeometryModel3D_Instances;
                xamlMember.Setter = set_204_GeometryModel3D_Instances;
                break;
            case "SharpDX.Matrix.Up":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Up", "SharpDX.Vector3");
                xamlMember.Getter = get_205_Matrix_Up;
                xamlMember.Setter = set_205_Matrix_Up;
                break;
            case "SharpDX.Matrix.Down":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Down", "SharpDX.Vector3");
                xamlMember.Getter = get_206_Matrix_Down;
                xamlMember.Setter = set_206_Matrix_Down;
                break;
            case "SharpDX.Matrix.Right":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Right", "SharpDX.Vector3");
                xamlMember.Getter = get_207_Matrix_Right;
                xamlMember.Setter = set_207_Matrix_Right;
                break;
            case "SharpDX.Matrix.Left":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Left", "SharpDX.Vector3");
                xamlMember.Getter = get_208_Matrix_Left;
                xamlMember.Setter = set_208_Matrix_Left;
                break;
            case "SharpDX.Matrix.Forward":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Forward", "SharpDX.Vector3");
                xamlMember.Getter = get_209_Matrix_Forward;
                xamlMember.Setter = set_209_Matrix_Forward;
                break;
            case "SharpDX.Matrix.Backward":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Backward", "SharpDX.Vector3");
                xamlMember.Getter = get_210_Matrix_Backward;
                xamlMember.Setter = set_210_Matrix_Backward;
                break;
            case "SharpDX.Matrix.Row1":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Row1", "SharpDX.Vector4");
                xamlMember.Getter = get_211_Matrix_Row1;
                xamlMember.Setter = set_211_Matrix_Row1;
                break;
            case "SharpDX.Matrix.Row2":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Row2", "SharpDX.Vector4");
                xamlMember.Getter = get_212_Matrix_Row2;
                xamlMember.Setter = set_212_Matrix_Row2;
                break;
            case "SharpDX.Matrix.Row3":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Row3", "SharpDX.Vector4");
                xamlMember.Getter = get_213_Matrix_Row3;
                xamlMember.Setter = set_213_Matrix_Row3;
                break;
            case "SharpDX.Matrix.Row4":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Row4", "SharpDX.Vector4");
                xamlMember.Getter = get_214_Matrix_Row4;
                xamlMember.Setter = set_214_Matrix_Row4;
                break;
            case "SharpDX.Matrix.Column1":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Column1", "SharpDX.Vector4");
                xamlMember.Getter = get_215_Matrix_Column1;
                xamlMember.Setter = set_215_Matrix_Column1;
                break;
            case "SharpDX.Matrix.Column2":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Column2", "SharpDX.Vector4");
                xamlMember.Getter = get_216_Matrix_Column2;
                xamlMember.Setter = set_216_Matrix_Column2;
                break;
            case "SharpDX.Matrix.Column3":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Column3", "SharpDX.Vector4");
                xamlMember.Getter = get_217_Matrix_Column3;
                xamlMember.Setter = set_217_Matrix_Column3;
                break;
            case "SharpDX.Matrix.Column4":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Column4", "SharpDX.Vector4");
                xamlMember.Getter = get_218_Matrix_Column4;
                xamlMember.Setter = set_218_Matrix_Column4;
                break;
            case "SharpDX.Matrix.TranslationVector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TranslationVector", "SharpDX.Vector3");
                xamlMember.Getter = get_219_Matrix_TranslationVector;
                xamlMember.Setter = set_219_Matrix_TranslationVector;
                break;
            case "SharpDX.Matrix.ScaleVector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ScaleVector", "SharpDX.Vector3");
                xamlMember.Getter = get_220_Matrix_ScaleVector;
                xamlMember.Setter = set_220_Matrix_ScaleVector;
                break;
            case "SharpDX.Matrix.IsIdentity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SharpDX.Matrix");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsIdentity", "Boolean");
                xamlMember.Getter = get_221_Matrix_IsIdentity;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.GeometryModel3D.SlopeScaledDepthBias":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SlopeScaledDepthBias", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_222_GeometryModel3D_SlopeScaledDepthBias;
                xamlMember.Setter = set_222_GeometryModel3D_SlopeScaledDepthBias;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.IsSelected":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_GeometryModel3D_IsSelected;
                xamlMember.Setter = set_223_GeometryModel3D_IsSelected;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.IsMultisampleEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsMultisampleEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_224_GeometryModel3D_IsMultisampleEnabled;
                xamlMember.Setter = set_224_GeometryModel3D_IsMultisampleEnabled;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.FillMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FillMode", "SharpDX.Direct3D11.FillMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_225_GeometryModel3D_FillMode;
                xamlMember.Setter = set_225_GeometryModel3D_FillMode;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.IsScissorEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsScissorEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_226_GeometryModel3D_IsScissorEnabled;
                xamlMember.Setter = set_226_GeometryModel3D_IsScissorEnabled;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.IsDepthClipEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsDepthClipEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_227_GeometryModel3D_IsDepthClipEnabled;
                xamlMember.Setter = set_227_GeometryModel3D_IsDepthClipEnabled;
                break;
            case "HelixToolkit.UWP.GeometryModel3D.EnableViewFrustumCheck":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.GeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableViewFrustumCheck", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_228_GeometryModel3D_EnableViewFrustumCheck;
                xamlMember.Setter = set_228_GeometryModel3D_EnableViewFrustumCheck;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.Acceleration":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Acceleration", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_229_ParticleStormModel3D_Acceleration;
                xamlMember.Setter = set_229_ParticleStormModel3D_Acceleration;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.AnimateSpriteByEnergy":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AnimateSpriteByEnergy", "Boolean");
                xamlMember.Getter = get_230_ParticleStormModel3D_AnimateSpriteByEnergy;
                xamlMember.Setter = set_230_ParticleStormModel3D_AnimateSpriteByEnergy;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.BlendColor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BlendColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_231_ParticleStormModel3D_BlendColor;
                xamlMember.Setter = set_231_ParticleStormModel3D_BlendColor;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ConsumerLocation":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ConsumerLocation", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_232_ParticleStormModel3D_ConsumerLocation;
                xamlMember.Setter = set_232_ParticleStormModel3D_ConsumerLocation;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ConsumerRadius":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ConsumerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_233_ParticleStormModel3D_ConsumerRadius;
                xamlMember.Setter = set_233_ParticleStormModel3D_ConsumerRadius;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.DestAlphaBlend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DestAlphaBlend", "SharpDX.Direct3D11.BlendOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_234_ParticleStormModel3D_DestAlphaBlend;
                xamlMember.Setter = set_234_ParticleStormModel3D_DestAlphaBlend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.DestBlend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DestBlend", "SharpDX.Direct3D11.BlendOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_235_ParticleStormModel3D_DestBlend;
                xamlMember.Setter = set_235_ParticleStormModel3D_DestBlend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.EmitterLocation":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EmitterLocation", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_236_ParticleStormModel3D_EmitterLocation;
                xamlMember.Setter = set_236_ParticleStormModel3D_EmitterLocation;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.EmitterRadius":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EmitterRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_237_ParticleStormModel3D_EmitterRadius;
                xamlMember.Setter = set_237_ParticleStormModel3D_EmitterRadius;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.EnergyDissipationRate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnergyDissipationRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_238_ParticleStormModel3D_EnergyDissipationRate;
                xamlMember.Setter = set_238_ParticleStormModel3D_EnergyDissipationRate;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.InitialEnergy":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InitialEnergy", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_239_ParticleStormModel3D_InitialEnergy;
                xamlMember.Setter = set_239_ParticleStormModel3D_InitialEnergy;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.Instances":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Instances", "System.Collections.Generic.IList`1<SharpDX.Matrix>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_240_ParticleStormModel3D_Instances;
                xamlMember.Setter = set_240_ParticleStormModel3D_Instances;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.NumTextureColumn":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NumTextureColumn", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_241_ParticleStormModel3D_NumTextureColumn;
                xamlMember.Setter = set_241_ParticleStormModel3D_NumTextureColumn;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.NumTextureRow":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NumTextureRow", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_242_ParticleStormModel3D_NumTextureRow;
                xamlMember.Setter = set_242_ParticleStormModel3D_NumTextureRow;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ParticleBounds":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ParticleBounds", "SharpDX.BoundingBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_243_ParticleStormModel3D_ParticleBounds;
                xamlMember.Setter = set_243_ParticleStormModel3D_ParticleBounds;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ParticleCount":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ParticleCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_244_ParticleStormModel3D_ParticleCount;
                xamlMember.Setter = set_244_ParticleStormModel3D_ParticleCount;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ParticleSize":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ParticleSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_245_ParticleStormModel3D_ParticleSize;
                xamlMember.Setter = set_245_ParticleStormModel3D_ParticleSize;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ParticleTexture":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ParticleTexture", "System.IO.Stream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_246_ParticleStormModel3D_ParticleTexture;
                xamlMember.Setter = set_246_ParticleStormModel3D_ParticleTexture;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.SourceAlphaBlend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SourceAlphaBlend", "SharpDX.Direct3D11.BlendOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_247_ParticleStormModel3D_SourceAlphaBlend;
                xamlMember.Setter = set_247_ParticleStormModel3D_SourceAlphaBlend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.SourceBlend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SourceBlend", "SharpDX.Direct3D11.BlendOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_248_ParticleStormModel3D_SourceBlend;
                xamlMember.Setter = set_248_ParticleStormModel3D_SourceBlend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.Turbulance":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Turbulance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_249_ParticleStormModel3D_Turbulance;
                xamlMember.Setter = set_249_ParticleStormModel3D_Turbulance;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.ConsumerGravity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ConsumerGravity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_250_ParticleStormModel3D_ConsumerGravity;
                xamlMember.Setter = set_250_ParticleStormModel3D_ConsumerGravity;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.RandomVectorGenerator":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RandomVectorGenerator", "HelixToolkit.UWP.Utilities.IRandomVector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_251_ParticleStormModel3D_RandomVectorGenerator;
                xamlMember.Setter = set_251_ParticleStormModel3D_RandomVectorGenerator;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.InitialVelocity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InitialVelocity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_252_ParticleStormModel3D_InitialVelocity;
                xamlMember.Setter = set_252_ParticleStormModel3D_InitialVelocity;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.CumulateAtBound":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CumulateAtBound", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_253_ParticleStormModel3D_CumulateAtBound;
                xamlMember.Setter = set_253_ParticleStormModel3D_CumulateAtBound;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.Blend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Blend", "SharpDX.Direct3D11.BlendOperation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_254_ParticleStormModel3D_Blend;
                xamlMember.Setter = set_254_ParticleStormModel3D_Blend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.AlphaBlend":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AlphaBlend", "SharpDX.Direct3D11.BlendOperation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_255_ParticleStormModel3D_AlphaBlend;
                xamlMember.Setter = set_255_ParticleStormModel3D_AlphaBlend;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.BlendFactor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BlendFactor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_256_ParticleStormModel3D_BlendFactor;
                xamlMember.Setter = set_256_ParticleStormModel3D_BlendFactor;
                break;
            case "HelixToolkit.UWP.ParticleStormModel3D.SampleMask":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ParticleStormModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SampleMask", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_257_ParticleStormModel3D_SampleMask;
                xamlMember.Setter = set_257_ParticleStormModel3D_SampleMask;
                break;
            case "HelixToolkit.UWP.LineGeometryModel3D.Color":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.LineGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_258_LineGeometryModel3D_Color;
                xamlMember.Setter = set_258_LineGeometryModel3D_Color;
                break;
            case "HelixToolkit.UWP.LineGeometryModel3D.Thickness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.LineGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Thickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_259_LineGeometryModel3D_Thickness;
                xamlMember.Setter = set_259_LineGeometryModel3D_Thickness;
                break;
            case "HelixToolkit.UWP.LineGeometryModel3D.Smoothness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.LineGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Smoothness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_260_LineGeometryModel3D_Smoothness;
                xamlMember.Setter = set_260_LineGeometryModel3D_Smoothness;
                break;
            case "HelixToolkit.UWP.LineGeometryModel3D.HitTestThickness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.LineGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HitTestThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_261_LineGeometryModel3D_HitTestThickness;
                xamlMember.Setter = set_261_LineGeometryModel3D_HitTestThickness;
                break;
            case "HelixToolkit.UWP.PostEffectMeshOutlineBlur.EffectName":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EffectName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_262_PostEffectMeshOutlineBlur_EffectName;
                xamlMember.Setter = set_262_PostEffectMeshOutlineBlur_EffectName;
                break;
            case "HelixToolkit.UWP.PostEffectMeshOutlineBlur.NumberOfBlurPass":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NumberOfBlurPass", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_263_PostEffectMeshOutlineBlur_NumberOfBlurPass;
                xamlMember.Setter = set_263_PostEffectMeshOutlineBlur_NumberOfBlurPass;
                break;
            case "HelixToolkit.UWP.PostEffectMeshBorderHighlight.DrawMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshBorderHighlight");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DrawMode", "HelixToolkit.UWP.OutlineMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_264_PostEffectMeshBorderHighlight_DrawMode;
                xamlMember.Setter = set_264_PostEffectMeshBorderHighlight_DrawMode;
                break;
            case "HelixToolkit.UWP.PostEffectMeshOutlineBlur.Color":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_265_PostEffectMeshOutlineBlur_Color;
                xamlMember.Setter = set_265_PostEffectMeshOutlineBlur_Color;
                break;
            case "HelixToolkit.UWP.PostEffectMeshOutlineBlur.ScaleX":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ScaleX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_266_PostEffectMeshOutlineBlur_ScaleX;
                xamlMember.Setter = set_266_PostEffectMeshOutlineBlur_ScaleX;
                break;
            case "HelixToolkit.UWP.PostEffectMeshOutlineBlur.ScaleY":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PostEffectMeshOutlineBlur");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ScaleY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_267_PostEffectMeshOutlineBlur_ScaleY;
                xamlMember.Setter = set_267_PostEffectMeshOutlineBlur_ScaleY;
                break;
            case "HelixToolkit.UWP.PointGeometryModel3D.Color":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PointGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_268_PointGeometryModel3D_Color;
                xamlMember.Setter = set_268_PointGeometryModel3D_Color;
                break;
            case "HelixToolkit.UWP.PointGeometryModel3D.Size":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PointGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Size", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_269_PointGeometryModel3D_Size;
                xamlMember.Setter = set_269_PointGeometryModel3D_Size;
                break;
            case "HelixToolkit.UWP.PointGeometryModel3D.Figure":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PointGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Figure", "HelixToolkit.UWP.PointFigure");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_270_PointGeometryModel3D_Figure;
                xamlMember.Setter = set_270_PointGeometryModel3D_Figure;
                break;
            case "HelixToolkit.UWP.PointGeometryModel3D.FigureRatio":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PointGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FigureRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_271_PointGeometryModel3D_FigureRatio;
                xamlMember.Setter = set_271_PointGeometryModel3D_FigureRatio;
                break;
            case "HelixToolkit.UWP.PointGeometryModel3D.HitTestThickness":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.PointGeometryModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HitTestThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_272_PointGeometryModel3D_HitTestThickness;
                xamlMember.Setter = set_272_PointGeometryModel3D_HitTestThickness;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.Octree":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Octree", "HelixToolkit.UWP.IOctreeBasic");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_273_OctreeManagerBaseWrapper_Octree;
                xamlMember.Setter = set_273_OctreeManagerBaseWrapper_Octree;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.EnableOctreeOutput":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableOctreeOutput", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_274_OctreeManagerBaseWrapper_EnableOctreeOutput;
                xamlMember.Setter = set_274_OctreeManagerBaseWrapper_EnableOctreeOutput;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.MinSize":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinSize", "Single");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_275_OctreeManagerBaseWrapper_MinSize;
                xamlMember.Setter = set_275_OctreeManagerBaseWrapper_MinSize;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.AutoDeleteIfEmpty":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AutoDeleteIfEmpty", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_276_OctreeManagerBaseWrapper_AutoDeleteIfEmpty;
                xamlMember.Setter = set_276_OctreeManagerBaseWrapper_AutoDeleteIfEmpty;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.Cubify":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Cubify", "Boolean");
                xamlMember.Getter = get_277_OctreeManagerBaseWrapper_Cubify;
                xamlMember.Setter = set_277_OctreeManagerBaseWrapper_Cubify;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.RecordHitPathBoundingBoxes":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RecordHitPathBoundingBoxes", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_278_OctreeManagerBaseWrapper_RecordHitPathBoundingBoxes;
                xamlMember.Setter = set_278_OctreeManagerBaseWrapper_RecordHitPathBoundingBoxes;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.MinObjectSizeToSplit":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinObjectSizeToSplit", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_279_OctreeManagerBaseWrapper_MinObjectSizeToSplit;
                xamlMember.Setter = set_279_OctreeManagerBaseWrapper_MinObjectSizeToSplit;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.Manager":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Manager", "HelixToolkit.UWP.IOctreeManager");
                xamlMember.Getter = get_280_OctreeManagerBaseWrapper_Manager;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.Enabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Enabled", "Boolean");
                xamlMember.Getter = get_281_OctreeManagerBaseWrapper_Enabled;
                xamlMember.Setter = set_281_OctreeManagerBaseWrapper_Enabled;
                break;
            case "HelixToolkit.UWP.OctreeManagerBaseWrapper.Parameter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.OctreeManagerBaseWrapper");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Parameter", "HelixToolkit.UWP.OctreeBuildParameter");
                xamlMember.Getter = get_282_OctreeManagerBaseWrapper_Parameter;
                xamlMember.Setter = set_282_OctreeManagerBaseWrapper_Parameter;
                break;
            case "HelixToolkit.UWP.DynamicReflectionMap3D.EnableReflector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DynamicReflectionMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EnableReflector", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_283_DynamicReflectionMap3D_EnableReflector;
                xamlMember.Setter = set_283_DynamicReflectionMap3D_EnableReflector;
                break;
            case "HelixToolkit.UWP.DynamicReflectionMap3D.Size":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DynamicReflectionMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Size", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_284_DynamicReflectionMap3D_Size;
                xamlMember.Setter = set_284_DynamicReflectionMap3D_Size;
                break;
            case "HelixToolkit.UWP.DynamicReflectionMap3D.FarField":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DynamicReflectionMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FarField", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_285_DynamicReflectionMap3D_FarField;
                xamlMember.Setter = set_285_DynamicReflectionMap3D_FarField;
                break;
            case "HelixToolkit.UWP.DynamicReflectionMap3D.NearField":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DynamicReflectionMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NearField", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_286_DynamicReflectionMap3D_NearField;
                xamlMember.Setter = set_286_DynamicReflectionMap3D_NearField;
                break;
            case "HelixToolkit.UWP.DynamicReflectionMap3D.IsLeftHanded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.DynamicReflectionMap3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsLeftHanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_287_DynamicReflectionMap3D_IsLeftHanded;
                xamlMember.Setter = set_287_DynamicReflectionMap3D_IsLeftHanded;
                break;
            case "HelixToolkit.UWP.BillboardTextModel3D.IsTransparent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.BillboardTextModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsTransparent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_288_BillboardTextModel3D_IsTransparent;
                xamlMember.Setter = set_288_BillboardTextModel3D_IsTransparent;
                break;
            case "HelixToolkit.UWP.BillboardTextModel3D.FixedSize":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.BillboardTextModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FixedSize", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_289_BillboardTextModel3D_FixedSize;
                xamlMember.Setter = set_289_BillboardTextModel3D_FixedSize;
                break;
            case "HelixToolkit.UWP.BillboardTextModel3D.SamplerDescription":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.BillboardTextModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SamplerDescription", "SharpDX.Direct3D11.SamplerStateDescription");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_290_BillboardTextModel3D_SamplerDescription;
                xamlMember.Setter = set_290_BillboardTextModel3D_SamplerDescription;
                break;
            case "HelixToolkit.UWP.ItemsModel3D.ItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ItemsModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_291_ItemsModel3D_ItemsSource;
                xamlMember.Setter = set_291_ItemsModel3D_ItemsSource;
                break;
            case "HelixToolkit.UWP.ItemsModel3D.OctreeManager":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ItemsModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OctreeManager", "HelixToolkit.UWP.IOctreeManagerWrapper");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_292_ItemsModel3D_OctreeManager;
                xamlMember.Setter = set_292_ItemsModel3D_OctreeManager;
                break;
            case "HelixToolkit.UWP.ItemsModel3D.Children":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.UWP.ItemsModel3D");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Children", "HelixToolkit.UWP.ObservableElement3DCollection");
                xamlMember.Getter = get_293_ItemsModel3D_Children;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

